From 89f4eeb84cd8a9e0caab31f1da7f5893ecdd307d Mon Sep 17 00:00:00 2001
From: arturo castro <arturo@openframeworks.cc>
Date: Mon, 4 Apr 2016 11:54:38 +0200
Subject: [PATCH] several fixes for glfw and main loop

Trying to fix GLFW slowness on some linux: #5009
Fixes window size values in some cases
Fixes main loop not finishing last window which in turned caused
game mode to let the screen in a wrong resolution when the app finished
---
 libs/openFrameworks/app/ofAppGLFWWindow.cpp | 198 +++++++++++++++-------------
 libs/openFrameworks/app/ofAppGLFWWindow.h   |   3 +-
 libs/openFrameworks/app/ofAppRunner.cpp     |   3 +-
 libs/openFrameworks/app/ofMainLoop.cpp      |   8 +-
 libs/openFrameworks/app/ofMainLoop.h        |  20 +--
 5 files changed, 123 insertions(+), 109 deletions(-)

diff --git a/libs/openFrameworks/app/ofAppGLFWWindow.cpp b/libs/openFrameworks/app/ofAppGLFWWindow.cpp
index 36678bf..4f478ac 100644
--- a/libs/openFrameworks/app/ofAppGLFWWindow.cpp
+++ b/libs/openFrameworks/app/ofAppGLFWWindow.cpp
@@ -48,6 +48,8 @@ ofAppGLFWWindow::ofAppGLFWWindow(){
 	windowP = nullptr;
 	windowW = 0;
 	windowH = 0;
+	currentW = 0;
+	currentH = 0;
 
 	glfwSetErrorCallback(error_cb);
 }
@@ -58,7 +60,7 @@ ofAppGLFWWindow::~ofAppGLFWWindow(){
 
 void ofAppGLFWWindow::close(){
 	if(windowP){
-		//hide the window before we destroy it stops a flicker on OS X on exit. 
+		//hide the window before we destroy it stops a flicker on OS X on exit.
 		glfwHideWindow(windowP);
 		glfwDestroyWindow(windowP);
 		windowP = nullptr;
@@ -253,7 +255,9 @@ void ofAppGLFWWindow::setup(const ofGLFWWindowSettings & _settings){
 
     glfwMakeContextCurrent(windowP);
 
-    glfwGetWindowSize(windowP, &windowW, &windowH );
+	glfwGetWindowSize(windowP, &currentW, &currentH );
+	windowW = settings.width;
+	windowH = settings.height;
 
     int framebufferW, framebufferH;
     glfwGetFramebufferSize(windowP, &framebufferW, &framebufferH);
@@ -448,11 +452,15 @@ ofPoint ofAppGLFWWindow::getWindowSize(){
 		if(desktopMode){
 			return ofVec3f(desktopMode->width*pixelScreenCoordScale, desktopMode->height*pixelScreenCoordScale,0);
 		}else{
-			return ofPoint(windowW*pixelScreenCoordScale,windowH*pixelScreenCoordScale);
+			return ofPoint(currentW*pixelScreenCoordScale,currentH*pixelScreenCoordScale);
 		}
 	}else{
-	    glfwGetWindowSize(windowP,&windowW,&windowH);
-		return ofPoint(windowW*pixelScreenCoordScale,windowH*pixelScreenCoordScale);
+		/*glfwGetWindowSize(windowP, &currentW, &currentH);
+		if(windowMode != OF_FULLSCREEN){
+			windowW = currentW;
+			windowH = currentH;
+		}*/
+		return ofPoint(currentW*pixelScreenCoordScale,currentH*pixelScreenCoordScale);
 	}
 }
 
@@ -478,7 +486,7 @@ int ofAppGLFWWindow::getCurrentMonitor(){
 
 	int xW;	int yW;
 	glfwGetWindowPos(windowP, &xW, &yW);
-	
+
 	for (int iC=0; iC < numberOfMonitors; iC++){
 		int xM; int yM;
 		glfwGetMonitorPos(monitors[iC], &xM, &yM);
@@ -508,43 +516,27 @@ ofPoint ofAppGLFWWindow::getScreenSize(){
 			}else{
 				return ofVec3f(desktopMode->height*pixelScreenCoordScale, desktopMode->width*pixelScreenCoordScale, 0);
 			}
-		}else{
-			return ofPoint(0,0);
 		}
-	}else{
-		return ofPoint(0,0);
 	}
+
+	return {0.f, 0.f};
 }
 
 //------------------------------------------------------------
 int ofAppGLFWWindow::getWidth(){
-	if(windowMode == OF_GAME_MODE || windowMode == OF_FULLSCREEN || (bWindowNeedsShowing && (settings.windowMode==OF_GAME_MODE || settings.windowMode==OF_FULLSCREEN)))
-	{
-		return getScreenSize().x;
-	}
-	else {
-		if( orientation == OF_ORIENTATION_DEFAULT || orientation == OF_ORIENTATION_180 ){
-			return windowW * pixelScreenCoordScale;
-		}else{
-			return windowH * pixelScreenCoordScale;
-		}
+	if( orientation == OF_ORIENTATION_DEFAULT || orientation == OF_ORIENTATION_180 ){
+		return currentW * pixelScreenCoordScale;
+	}else{
+		return currentH * pixelScreenCoordScale;
 	}
-
 }
 
 //------------------------------------------------------------
-int ofAppGLFWWindow::getHeight()
-{
-	if(windowMode == OF_GAME_MODE || windowMode == OF_FULLSCREEN || (bWindowNeedsShowing && (settings.windowMode==OF_GAME_MODE || settings.windowMode==OF_FULLSCREEN)))
-	{
-		return getScreenSize().y;
-	}
-	else {
-		if( orientation == OF_ORIENTATION_DEFAULT || orientation == OF_ORIENTATION_180 ){
-			return windowH * pixelScreenCoordScale;
-		}else{
-			return windowW * pixelScreenCoordScale;
-		}
+int ofAppGLFWWindow::getHeight(){
+	if( orientation == OF_ORIENTATION_DEFAULT || orientation == OF_ORIENTATION_180 ){
+		return currentH * pixelScreenCoordScale;
+	}else{
+		return currentW * pixelScreenCoordScale;
 	}
 }
 
@@ -565,6 +557,12 @@ void ofAppGLFWWindow::setWindowPosition(int x, int y){
 
 //------------------------------------------------------------
 void ofAppGLFWWindow::setWindowShape(int w, int h){
+	if(windowMode == OF_WINDOW){
+		windowW = w;
+		windowH = h;
+	}
+	currentW = w;
+	currentH = h;
 	#ifdef TARGET_OSX
 		ofPoint pos = getWindowPosition();
 		glfwSetWindowSize(windowP,w/pixelScreenCoordScale,h/pixelScreenCoordScale);
@@ -618,63 +616,72 @@ void ofAppGLFWWindow::setFullscreen(bool fullscreen){
  
     Window nativeWin = glfwGetX11Window(windowP);
 	Display* display = glfwGetX11Display();
-	int monitorCount;
-	GLFWmonitor** monitors = glfwGetMonitors(&monitorCount);
-
-	if( settings.multiMonitorFullScreen && monitorCount > 1 ){
-		// find the monitors at the edges of the virtual desktop
-		int minx=numeric_limits<int>::max();
-		int miny=numeric_limits<int>::max();
-		int maxx=numeric_limits<int>::min();
-		int maxy=numeric_limits<int>::min();
-		int x,y,w,h;
-		int monitorLeft=0, monitorRight=0, monitorTop=0, monitorBottom=0;
-        for(int i = 0; i < monitorCount; i++){
-            glfwGetMonitorPos(monitors[i],&x,&y);
-            auto videoMode = glfwGetVideoMode(monitors[i]);
-            w = videoMode->width;
-            h = videoMode->height;
-            if(x<minx){
-            	monitorLeft = i;
-            	minx = x;
-            }
-            if(y<miny){
-            	monitorTop = i;
-            	miny = y;
-            }
-            if(x+w>maxx){
-            	monitorRight = i;
-            	maxx = x+w;
-            }
-            if(y+h>maxy){
-            	monitorBottom = i;
-            	maxy = y+h;
-            }
- 
-        }
- 
-        // send fullscreen_monitors event with the edges monitors
-		Atom m_net_fullscreen_monitors= XInternAtom(display, "_NET_WM_FULLSCREEN_MONITORS", false);
- 
-		XEvent xev;
- 
-		xev.xclient.type = ClientMessage;
-		xev.xclient.serial = 0;
-		xev.xclient.send_event = True;
-		xev.xclient.window = nativeWin;
-		xev.xclient.message_type = m_net_fullscreen_monitors;
-		xev.xclient.format = 32;
- 
-		xev.xclient.data.l[0] = monitorTop;
-		xev.xclient.data.l[1] = monitorBottom;
-		xev.xclient.data.l[2] = monitorLeft;
-		xev.xclient.data.l[3] = monitorRight;
-		xev.xclient.data.l[4] = 1;
-		XSendEvent(display, RootWindow(display, DefaultScreen(display)),
-				   False, SubstructureRedirectMask | SubstructureNotifyMask, &xev);
- 
+	if(windowMode==OF_FULLSCREEN){
+		int monitorCount;
+		GLFWmonitor** monitors = glfwGetMonitors(&monitorCount);
+		if( settings.multiMonitorFullScreen && monitorCount > 1 ){
+			// find the monitors at the edges of the virtual desktop
+			int minx=numeric_limits<int>::max();
+			int miny=numeric_limits<int>::max();
+			int maxx=numeric_limits<int>::min();
+			int maxy=numeric_limits<int>::min();
+			int x,y,w,h;
+			int monitorLeft=0, monitorRight=0, monitorTop=0, monitorBottom=0;
+			for(int i = 0; i < monitorCount; i++){
+				glfwGetMonitorPos(monitors[i],&x,&y);
+				auto videoMode = glfwGetVideoMode(monitors[i]);
+				w = videoMode->width;
+				h = videoMode->height;
+				if(x<minx){
+					monitorLeft = i;
+					minx = x;
+				}
+				if(y<miny){
+					monitorTop = i;
+					miny = y;
+				}
+				if(x+w>maxx){
+					monitorRight = i;
+					maxx = x+w;
+				}
+				if(y+h>maxy){
+					monitorBottom = i;
+					maxy = y+h;
+				}
+			}
+
+			// send fullscreen_monitors event with the edges monitors
+			Atom m_net_fullscreen_monitors= XInternAtom(display, "_NET_WM_FULLSCREEN_MONITORS", false);
+
+			XEvent xev;
+
+			xev.xclient.type = ClientMessage;
+			xev.xclient.serial = 0;
+			xev.xclient.send_event = True;
+			xev.xclient.window = nativeWin;
+			xev.xclient.message_type = m_net_fullscreen_monitors;
+			xev.xclient.format = 32;
+
+			xev.xclient.data.l[0] = monitorTop;
+			xev.xclient.data.l[1] = monitorBottom;
+			xev.xclient.data.l[2] = monitorLeft;
+			xev.xclient.data.l[3] = monitorRight;
+			xev.xclient.data.l[4] = 1;
+			XSendEvent(display, RootWindow(display, DefaultScreen(display)),
+					   False, SubstructureRedirectMask | SubstructureNotifyMask, &xev);
+			currentW = maxx - minx;
+			currentH = maxy - minx;
+		}else{
+			auto monitor = glfwGetWindowMonitor(windowP);
+			if(monitor){
+				auto videoMode = glfwGetVideoMode(monitor);
+				if(videoMode){
+					currentW = videoMode->width;
+					currentH = videoMode->height;
+				}
+			}
+		}
 	}
- 
 	// send fullscreen event
 	Atom m_net_state= XInternAtom(display, "_NET_WM_STATE", false);
 	Atom m_net_fullscreen= XInternAtom(display, "_NET_WM_STATE_FULLSCREEN", false);
@@ -707,6 +714,7 @@ void ofAppGLFWWindow::setFullscreen(bool fullscreen){
 	XChangeProperty(display, nativeWin, m_bypass_compositor, XA_CARDINAL, 32, PropModeReplace, (unsigned char*)&value, 1);
  
 	XFlush(display);
+	setWindowShape(windowW, windowH);
  
 #elif defined(TARGET_OSX)
 	if( windowMode == OF_FULLSCREEN){
@@ -870,7 +878,9 @@ void ofAppGLFWWindow::setFullscreen(bool fullscreen){
  
         }
  
-        SetWindowPos(hwnd, HWND_TOPMOST, xpos, ypos, fullscreenW, fullscreenH, SWP_SHOWWINDOW);
+		SetWindowPos(hwnd, HWND_TOPMOST, xpos, ypos, fullscreenW, fullscreenH, SWP_SHOWWINDOW);
+		currentW = fullscreenW;
+		currentH = fullscreenH;
  
 	}else if( windowMode == OF_WINDOW ){
 		// set window shape if started in fullscreen
@@ -1167,8 +1177,12 @@ void ofAppGLFWWindow::keyboard_cb(GLFWwindow* windowP_, int keycode, int scancod
 //------------------------------------------------------------
 void ofAppGLFWWindow::resize_cb(GLFWwindow* windowP_,int w, int h) {
 	ofAppGLFWWindow * instance = setCurrent(windowP_);
-	instance->windowW = w;
-	instance->windowH = h;
+	if(instance->windowMode == OF_WINDOW){
+		instance->windowW = w;
+		instance->windowH = h;
+	}
+	instance->currentW = w;
+	instance->currentH = h;
 	instance->events().notifyWindowResized(w*instance->pixelScreenCoordScale, h*instance->pixelScreenCoordScale);
 	instance->nFramesSinceWindowResized = 0;
 }
diff --git a/libs/openFrameworks/app/ofAppGLFWWindow.h b/libs/openFrameworks/app/ofAppGLFWWindow.h
index 4b4873e..7fbc7dc 100644
--- a/libs/openFrameworks/app/ofAppGLFWWindow.h
+++ b/libs/openFrameworks/app/ofAppGLFWWindow.h
@@ -194,6 +194,7 @@ private:
 
 	bool			bEnableSetupScreen;
 	int				windowW, windowH;
+	int				currentW, currentH;
 
 	ofRectangle windowRect;
 
@@ -204,7 +205,7 @@ private:
 	bool			bWindowNeedsShowing;
 
 	GLFWwindow* 	windowP;
-    
+
 	int				getCurrentMonitor();
 
 	ofBaseApp *	ofAppPtr;
diff --git a/libs/openFrameworks/app/ofAppRunner.cpp b/libs/openFrameworks/app/ofAppRunner.cpp
index 3b02788..7551033 100644
--- a/libs/openFrameworks/app/ofAppRunner.cpp
+++ b/libs/openFrameworks/app/ofAppRunner.cpp
@@ -245,8 +245,7 @@ void ofExitCallback(){
 	// static deinitialization happens after this finishes
 	// every object should have ended by now and won't receive any
 	// events
-
-        of::priv::endutils();
+	of::priv::endutils();
 
 	initialized() = false;
 }
diff --git a/libs/openFrameworks/app/ofMainLoop.cpp b/libs/openFrameworks/app/ofMainLoop.cpp
index 808e372..e109ecb 100644
--- a/libs/openFrameworks/app/ofMainLoop.cpp
+++ b/libs/openFrameworks/app/ofMainLoop.cpp
@@ -203,7 +203,7 @@ void ofMainLoop::exit(){
 }
 
 shared_ptr<ofAppBaseWindow> ofMainLoop::getCurrentWindow(){
-	return currentWindow;
+	return currentWindow.lock();
 }
 
 void ofMainLoop::setCurrentWindow(shared_ptr<ofAppBaseWindow> window){
@@ -211,7 +211,7 @@ void ofMainLoop::setCurrentWindow(shared_ptr<ofAppBaseWindow> window){
 }
 
 void ofMainLoop::setCurrentWindow(ofAppBaseWindow * window){
-	if(currentWindow.get() == window){
+	if(currentWindow.lock().get() == window){
 		return;
 	}
 	for(auto i: windowsApps){
@@ -223,11 +223,11 @@ void ofMainLoop::setCurrentWindow(ofAppBaseWindow * window){
 }
 
 shared_ptr<ofBaseApp> ofMainLoop::getCurrentApp(){
-	return windowsApps[currentWindow];
+	return windowsApps[currentWindow.lock()];
 }
 
 ofCoreEvents & ofMainLoop::events(){
-	return currentWindow->events();
+	return currentWindow.lock()->events();
 }
 
 void ofMainLoop::shouldClose(int _status){
diff --git a/libs/openFrameworks/app/ofMainLoop.h b/libs/openFrameworks/app/ofMainLoop.h
index 04454e6..515eea1 100644
--- a/libs/openFrameworks/app/ofMainLoop.h
+++ b/libs/openFrameworks/app/ofMainLoop.h
@@ -10,9 +10,9 @@ public:
 	ofMainLoop();
 	virtual ~ofMainLoop();
 
-	shared_ptr<ofAppBaseWindow> createWindow(const ofWindowSettings & settings);
+	std::shared_ptr<ofAppBaseWindow> createWindow(const ofWindowSettings & settings);
 	template<typename Window>
-	void addWindow(shared_ptr<Window> window){
+	void addWindow(std::shared_ptr<Window> window){
 		allowMultiWindow = Window::allowsMultiWindow();
 		if(Window::doesLoop()){
 		    windowLoop = Window::loop;
@@ -23,31 +23,31 @@ public:
 		if(!allowMultiWindow){
 		    windowsApps.clear();
 		}
-		windowsApps[window] = shared_ptr<ofBaseApp>();
+		windowsApps[window] = std::shared_ptr<ofBaseApp>();
 		currentWindow = window;
 		ofAddListener(window->events().keyPressed,this,&ofMainLoop::keyPressed);
 	}
 
-	void run(shared_ptr<ofAppBaseWindow> window, shared_ptr<ofBaseApp> app);
-	void run(shared_ptr<ofBaseApp> app);
+	void run(std::shared_ptr<ofAppBaseWindow> window, std::shared_ptr<ofBaseApp> app);
+	void run(std::shared_ptr<ofBaseApp> app);
 	int loop();
 	void loopOnce();
 	void pollEvents();
 	void exit();
 	ofCoreEvents & events();
 	void shouldClose(int status);
-	shared_ptr<ofAppBaseWindow> getCurrentWindow();
-	void setCurrentWindow(shared_ptr<ofAppBaseWindow> window);
+	std::shared_ptr<ofAppBaseWindow> getCurrentWindow();
+	void setCurrentWindow(std::shared_ptr<ofAppBaseWindow> window);
 	void setCurrentWindow(ofAppBaseWindow * window);
-	shared_ptr<ofBaseApp> getCurrentApp();
+	std::shared_ptr<ofBaseApp> getCurrentApp();
 	void setEscapeQuitsLoop(bool quits);
 
 	ofEvent<void> exitEvent;
 private:
 	void keyPressed(ofKeyEventArgs & key);
-	map<shared_ptr<ofAppBaseWindow>,shared_ptr<ofBaseApp> > windowsApps;
+	map<std::shared_ptr<ofAppBaseWindow>,std::shared_ptr<ofBaseApp> > windowsApps;
 	bool bShouldClose;
-	shared_ptr<ofAppBaseWindow> currentWindow;
+	std::weak_ptr<ofAppBaseWindow> currentWindow;
 	int status;
 	bool allowMultiWindow;
 	std::function<void()> windowLoop;
-- 
2.10.2

