#N canvas 321 23 601 849 10;
#X declare -lib ofelia;
#X obj 0 0 cnv 15 580 40 empty empty ofLoadMesh3d 3 12 0 18 -204280
-1 0;
#X obj 0 361 cnv 3 580 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 0 600 cnv 3 580 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 75 369 cnv 17 3 220 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 75 608 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 0 797 cnv 15 580 21 empty empty empty 20 12 0 14 -228856 -66577
0;
#X obj 0 728 cnv 3 580 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X text 95 608 float;
#X text 95 369 name <s>;
#X text 95 389 load <l>;
#X text 95 429 append <l>;
#X text 95 449 prepend <l>;
#X text 72 751 1) symbol;
#X text 72 771 2) list;
#N canvas 322 132 507 253 about_vector 0;
#X text 26 23 in ofelia \, a vector data structure is commonly used
for handling various data types such as float \, symbol and list. vectors
are much like arrays that can dynamically be changed in size.;
#X text 26 163 each "loader" object should have a unique variable name
so its data can be properly accessed by "getter" objects that use the
name.;
#X text 26 93 in general \, objects that use vector are divided into
two types \, "loader" objects that can store an array of data and "getter"
objects that can read the stored data from "loader" objects.;
#X restore 486 66 pd about_vector;
#N canvas 321 86 601 788 related_getter_objects 0;
#X obj 10 12 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 87 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 10 63 5 0 0 0 - - -, f 5;
#X obj 10 138 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 189 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 240 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 291 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 342 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 393 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 444 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 495 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 750 print;
#X obj 10 546 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 597 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 10 648 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 52 63 0: not exists \, 1: exists.;
#X text 33 11 check if the mesh3d variable name exists or not.;
#X obj 10 36 ofDoesMesh3dNameExist @myMesh3d;
#X obj 10 111 ofGetMesh3dVertex @myMesh3d[1];
#X obj 10 162 ofGetMesh3dIndex @myMesh3d[1];
#X obj 10 213 ofGetMesh3dNormal @myMesh3d[1];
#X obj 10 264 ofGetMesh3dTexCoord @myMesh3d[1];
#X obj 10 315 ofGetMesh3dColor @myMesh3d[1];
#X obj 10 366 ofGetMesh3dVertices @myMesh3d;
#X obj 10 417 ofGetMesh3dIndices @myMesh3d;
#X obj 10 468 ofGetMesh3dNormals @myMesh3d;
#X obj 10 519 ofGetMesh3dTexCoords @myMesh3d;
#X obj 10 570 ofGetMesh3dColors @myMesh3d;
#X obj 10 621 ofGetMesh3dCommands @myMesh3d;
#X obj 10 672 ofGetMesh3dBoundingBox @myMesh3d;
#X text 33 86 get the mesh3d vertex at the index "1". (starting from
"0");
#X text 33 137 get the mesh3d index at the index "1". (starting from
"0");
#X text 33 188 get the mesh3d normal at the index "1". (starting from
"0");
#X text 33 239 get the mesh3d texCoord at the index "1" (starting from
"0");
#X text 33 290 get the mesh3d color at the index "1". (starting from
"0");
#X text 33 341 get all mesh3d vertices as a list.;
#X text 33 392 get all mesh3d indices as a list.;
#X text 33 443 get all mesh3d normals as a list.;
#X text 33 494 get all mesh3d texCoords as a list.;
#X text 33 545 get all mesh3d colors as a list.;
#X text 33 596 get all mesh3d commands as a list.;
#X obj 10 699 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 33 698 get the centroid of all the vetices in the mesh3d.;
#X obj 10 723 ofGetMesh3dCentroid @myMesh3d;
#X text 33 647 get the dimensions of the mesh3d bounding box.;
#X connect 0 0 17 0;
#X connect 1 0 18 0;
#X connect 3 0 19 0;
#X connect 4 0 20 0;
#X connect 5 0 21 0;
#X connect 6 0 22 0;
#X connect 7 0 23 0;
#X connect 8 0 24 0;
#X connect 9 0 25 0;
#X connect 10 0 26 0;
#X connect 12 0 27 0;
#X connect 13 0 28 0;
#X connect 14 0 29 0;
#X connect 17 0 2 0;
#X connect 18 0 11 0;
#X connect 19 0 11 0;
#X connect 20 0 11 0;
#X connect 21 0 11 0;
#X connect 22 0 11 0;
#X connect 23 0 11 0;
#X connect 24 0 11 0;
#X connect 25 0 11 0;
#X connect 26 0 11 0;
#X connect 27 0 11 0;
#X connect 28 0 11 0;
#X connect 29 0 11 0;
#X connect 41 0 43 0;
#X connect 43 0 11 0;
#X restore 160 160 pd related_getter_objects;
#X text 95 469 insert <l \, f \, f>;
#X text 95 489 fill <l \, f \, f>;
#X obj 23 339 ofWindow 320 240 LEFT TOP;
#X text 95 569 primMode <f/s>;
#X obj 75 631 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 95 631 float;
#X obj 75 654 cnv 17 3 17 empty empty 2 5 9 0 16 -228856 -162280 0
;
#X text 95 654 float;
#X obj 75 677 cnv 17 3 17 empty empty 3 5 9 0 16 -228856 -162280 0
;
#X text 95 677 float;
#X obj 75 700 cnv 17 3 17 empty empty 4 5 9 0 16 -228856 -162280 0
;
#X text 95 700 float;
#X text 241 608 - the number of stored vertices.;
#X text 241 631 - the number of stored indices.;
#X text 241 654 - the number of stored normals.;
#X text 241 677 - the number of stored texture coordinates.;
#X text 241 700 - the number of stored colors.;
#X text 95 509 erase <s \, f \, f>;
#X text 95 529 clear <s>;
#X text 95 549 clear;
#X text 95 409 add <l>;
#X floatatom 23 226 5 0 0 0 - - -, f 5;
#X floatatom 49 246 5 0 0 0 - - -, f 5;
#X floatatom 75 266 5 0 0 0 - - -, f 5;
#X floatatom 101 286 5 0 0 0 - - -, f 5;
#X floatatom 128 306 5 0 0 0 - - -, f 5;
#X text 63 225 the number of stored vertices.;
#X text 90 245 the number of stored indices.;
#X text 115 265 the number of stored normals.;
#X text 141 285 the number of stored texture coordinates.;
#X text 168 305 the number of stored colors.;
#X obj 499 5 ofLoadMesh3d;
#N canvas 321 133 1104 624 list_of_mesh3d_commands 0;
#X text 37 34 <command name>;
#X text 207 34 <arguments>;
#X text 657 34 <description>;
#X text 37 154 circle;
#X text 37 174 ellipse;
#X text 37 194 sector;
#X text 37 254 square;
#X text 37 314 rectRounded4;
#X text 37 294 rectRounded;
#X text 37 334 cross;
#X text 37 354 heart;
#X text 37 374 moon;
#X text 37 394 regPolygon;
#X text 37 414 star;
#X text 37 274 rectangle (rect);
#X text 37 214 eqTriangle (eqTri);
#X text 37 234 isoTriangle (isoTri);
#X text 37 54 vertex;
#X text 37 74 index;
#X text 37 94 normal;
#X text 37 114 texCoord;
#X text 657 114 a 2d coordinate that represents the texture coordinate.
;
#X text 37 134 color;
#X text 657 134 a color used for the vertex in the same position.;
#X text 657 154 load a circle mesh.;
#X text 657 174 load an ellipse mesh.;
#X text 657 194 load a sector mesh.;
#X text 657 214 load an equilateral triangle mesh.;
#X text 657 234 load an isosceles triangle mesh.;
#X text 657 254 load a square mesh.;
#X text 657 274 load a rectangle mesh.;
#X text 657 294 load a rounded rectangle mesh with a given corner radius.
;
#X text 657 314 load a rounded rectangle mesh with given 4 corner radiuses.
;
#X text 657 334 load a cross mesh.;
#X text 657 354 load a heart mesh.;
#X text 657 374 load a moon mesh.;
#X text 657 394 load a regular polygon mesh.;
#X text 657 414 load a star mesh.;
#X text 37 434 box;
#X text 657 434 load a box mesh.;
#X text 657 74 an index represents an order of connection for vertices.
;
#X text 658 54 a 3d vertex to be used in mesh.;
#X text 657 94 a 3d normal that defines how a surface responds to lighting.
;
#X text 207 54 x \, y \, z.;
#X text 207 74 index.;
#X text 207 94 x \, y \, z.;
#X text 207 114 x \, y.;
#X text 207 134 r \, g \, b \, a.;
#X text 207 154 radius \, circleRes.;
#X text 207 174 width \, height \, circleRes.;
#X text 207 194 radiusX \, radiusY \, angleBegin \, angleEnd \, circleRes.
;
#X text 207 214 size.;
#X text 207 234 width \, height.;
#X text 207 254 size.;
#X text 207 274 width \, height.;
#X text 207 294 width \, height \, radius \, circleRes.;
#X text 207 314 width \, height \, radius1 \, radius2 \, radius3 \,
radius4 \, circleRes;
#X text 207 334 size \, thickness.;
#X text 207 354 width \, height \, curveRes.;
#X text 207 374 width \, height \, phase \, circleRes.;
#X text 207 394 radius \, numSides.;
#X text 207 414 radius1 \, radius2 \, numPoints.;
#X text 207 434 width \, height \, depth \, resX \, resY \, resZ.;
#X text 37 454 cone;
#X text 37 484 cylinder;
#X text 657 454 load a cone mesh.;
#X text 657 484 load a cylinder mesh.;
#X text 37 514 icosphere;
#X text 657 514 load a icosphere mesh.;
#X text 37 534 plane;
#X text 657 534 load a plane mesh.;
#X text 37 554 sphere;
#X text 657 554 load a sphere mesh.;
#X text 207 514 radius \, iterations.;
#X text 207 534 width \, height \, columns \, rows \, primMode.;
#X text 207 454 radius \, height \, radiusSegments \, heightSegments
\, capSegments \, primMode.;
#X text 207 484 radius \, height \, radiusSegments \, heightSegments
\, capSegments \, bCapped \, primMode.;
#X text 207 554 radius \, res \, primMode.;
#X restore 161 93 pd list_of_mesh3d_commands;
#N canvas 322 133 912 584 mesh3d_example 0;
#X msg 36 43 print;
#X obj 36 508 outlet;
#X text 85 43 print the current settings and stored array elements.
;
#X obj 135 304 vradio 15 1 0 7 empty empty empty 0 -8 0 10 -262144
-1 -1 0;
#X msg 36 451 clear;
#X msg 36 180 append color 255 0 255 255 color 255 0 0 255 color 0
255 0 255 color 0 0 255 255;
#X obj 36 414 ofPack primMode 0;
#X text 408 80 (re)initialize vertex and index arrays.;
#X text 401 181 append colors used for the vertex.;
#X msg 36 230 erase color 0;
#X text 80 451 clear all arrays.;
#X msg 36 267 clear color;
#X text 119 267 clear the color array.;
#X text 132 230 remove the first element in the color array.;
#X text 151 414 set the primitive mode.;
#X msg 36 80 load vertex -50 -50 0 vertex 50 -50 0 vertex 50 50 0 vertex
-50 50 0 index 0 index 1 index 3 index 1 index 2 index 3;
#X text 154 304 0: TRIANGLES;
#X text 154 319 1: TRIANGLE_STRIP;
#X text 154 334 2: TRIANGLE_FAN;
#X text 154 349 3: LINES;
#X text 154 364 4: LINE_STRIP;
#X text 154 379 5: LINE_LOOP;
#X text 154 394 6: POINTS;
#X msg 36 130 load vertex -50 -50 0 50 -50 0 50 50 0 -50 50 0 index
0 1 3 1 2 3;
#X text 408 130 this is identical to the one above as you can skip
writing the repeating command names.;
#X connect 0 0 1 0;
#X connect 3 0 6 1;
#X connect 4 0 1 0;
#X connect 5 0 1 0;
#X connect 6 0 1 0;
#X connect 9 0 1 0;
#X connect 11 0 1 0;
#X connect 15 0 1 0;
#X connect 23 0 1 0;
#X restore 23 93 pd mesh3d_example;
#X text 241 369 - sets the unique variable name for the array.;
#X text 241 389 - (re)initializes an array with one or more elements.
;
#X text 241 409 - adds a single element to the end of the array.;
#X text 241 429 - appends one or more elements to the array.;
#X text 241 449 - prepends one or more elements to the array.;
#X text 241 469 - inserts an element at the specified position.;
#X text 241 489 - assigns value to all the elements in the range.;
#X text 241 509 - removes a range of elements from the specified array.
;
#X text 241 529 - removes all elements from the specified array.;
#X text 241 549 - removes all elements from all arrays.;
#X text 241 569 - sets the primitive mode.;
#X text 241 751 - sets the unique variable name for the array.;
#X text 241 771 - initializes an array with one or more elements.;
#N canvas 321 134 625 258 related_drawer_objects 0;
#X obj 30 120 ofTranslate 160 120;
#X obj 63 34 loadbang;
#X obj 63 55 ofGetLastRenderOrder;
#X obj 30 76 ofHead;
#X obj 30 98 ofClear 63;
#X obj 30 174 ofSetFillMode FILLED;
#X obj 147 152 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 172 151 note: the mesh will be drawn as a wireframe when it's
not filled.;
#X obj 30 196 ofDrawMesh3d @myMesh3d;
#X text 174 197 draw the stored mesh3d.;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 2 0 3 1;
#X connect 3 0 4 0;
#X connect 4 0 0 0;
#X connect 5 0 8 0;
#X connect 6 0 5 1;
#X restore 160 140 pd related_drawer_objects;
#X obj 23 120 ofLoadMesh3d \; @myMesh3d \; vertex -50 50 0 \; vertex
0 -50 0 \; vertex 50 50 0 \; color 255 0 0 255 \; color 0 255 0 255
\; color 0 0 255 255 \;;
#N canvas 322 133 602 224 related_editor_objects 0;
#N canvas 321 86 693 781 ofEditMesh3dVertex_example 0;
#X text 230 661 edit the specified array element.;
#X msg 30 264 limit 3;
#X msg 30 404 normalize;
#X msg 30 594 scale 10;
#X text 100 404 normalize the array element to a length of 1;
#X msg 30 34 assign 3 4 5;
#X text 117 34 assign "3 4 5" to the array element.;
#X msg 30 64 add 2 3 4;
#X text 98 64 add "2 3 4" to the array element.;
#X msg 30 94 sub 1 2 3;
#X text 101 94 subtract "1 2 3" from the array element.;
#X msg 30 124 mult 3 2 1;
#X text 107 124 multiply the array element by "3 2 1".;
#X msg 30 154 div 4 5 6;
#X text 100 154 divide the array element by "4 5 6".;
#X msg 30 184 cross 3 2 1;
#X msg 30 224 lerp 8 6 4 0.5;
#X text 130 225 linearly interpolate the array element towards "8 6
4" with the control amount of "0.5".;
#X text 113 185 set the array element to the cross product of itself
and "3 2 1".;
#X text 210 295 map the array element from its default coordinate system
origin (0 \, 0 \, 0) \, X direction (1 \, 0 \, 0) \, Y direction (0
\, 1 \, 0) \, Z direction (0 \, 0 \, 1) to a new coordinate system
defined with origin at "0 0 0" \, X direction "2 0 0" \, and Y direction
"0 2 0" \, and Z direction "0 0 2".;
#X msg 30 294 map 0 0 0 2 0 0 0 2 0 0 0 2;
#X msg 30 364 middle 8 6 4;
#X text 117 365 set the array element to the midpoint between itself
and "8 6 4".;
#X msg 30 434 perpendicular 0 1 0;
#X text 161 435 construct a plane using the array element and "0 1
0" (by finding the plane that both lie on) \, and set our 'x' \, 'y'
and 'z' to be the vector that is perpendicular to the constructed plane
(the normal to the plane).;
#X msg 30 494 rotate 90 5 4 0 10 8 0;
#X msg 30 544 rotateRad 1.5 5 4 0 10 8 0;
#X text 89 264 restrict the length(magnitude) of the array element
to "3".;
#X text 179 495 rotate the array element by "90" angle degrees around
the axis specified by "10 8 0" \, using "5 4 0" as the origin of rotation.
;
#X text 202 545 rotate the array element by "1.5" angle radians around
the axis specified by "10 8 0" \, using "5 4 0" as the origin of rotation.
;
#X obj 30 725 print;
#X obj 30 683 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 48 683 outputs bang when editing is done.;
#X obj 30 661 ofEditMesh3dVertex @myMesh3d[1];
#X obj 30 703 ofGetMesh3dVertex @myMesh3d[1];
#X text 94 594 scale the array element up or down so that it has the
requested length "10".;
#X connect 1 0 33 0;
#X connect 2 0 33 0;
#X connect 3 0 33 0;
#X connect 5 0 33 0;
#X connect 7 0 33 0;
#X connect 9 0 33 0;
#X connect 11 0 33 0;
#X connect 13 0 33 0;
#X connect 15 0 33 0;
#X connect 16 0 33 0;
#X connect 20 0 33 0;
#X connect 21 0 33 0;
#X connect 23 0 33 0;
#X connect 25 0 33 0;
#X connect 26 0 33 0;
#X connect 31 0 34 0;
#X connect 33 0 31 0;
#X connect 34 0 30 0;
#X restore 37 38 pd ofEditMesh3dVertex_example;
#N canvas 323 132 602 391 ofEditMesh3dIndex_example 0;
#X msg 30 34 assign 3;
#X text 92 34 assign "3" to the array element.;
#X msg 30 64 add 2;
#X msg 30 124 mult 2;
#X text 81 124 multiply the array element by "2".;
#X text 74 64 add "2" to the array element.;
#X msg 30 154 div 2;
#X text 75 154 divide the array element by "2".;
#X msg 30 94 sub 2;
#X text 74 94 subtract "2" from the array element.;
#X msg 30 184 lerp 5 0.5;
#X msg 30 214 middle 8;
#X text 107 185 linearly interpolate the array element towards "5"
with the control amount of "0.5".;
#X text 95 215 set the array element to the midpoint between itself
and "8".;
#X text 222 262 edit the specified array element.;
#X obj 30 326 print;
#X obj 30 284 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 48 284 outputs bang when editing is done.;
#X obj 30 262 ofEditMesh3dIndex @myMesh3d[1];
#X obj 30 304 ofGetMesh3dIndex @myMesh3d[1];
#X connect 0 0 18 0;
#X connect 2 0 18 0;
#X connect 3 0 18 0;
#X connect 6 0 18 0;
#X connect 8 0 18 0;
#X connect 10 0 18 0;
#X connect 11 0 18 0;
#X connect 16 0 19 0;
#X connect 18 0 16 0;
#X connect 19 0 15 0;
#X restore 37 58 pd ofEditMesh3dIndex_example;
#N canvas 322 87 693 781 ofEditMesh3dNormal_example 0;
#X text 229 661 edit the specified array element.;
#X msg 30 264 limit 3;
#X msg 30 404 normalize;
#X msg 30 594 scale 10;
#X text 100 404 normalize the array element to a length of 1;
#X msg 30 34 assign 3 4 5;
#X text 116 34 assign "3 4 5" to the array element.;
#X msg 30 64 add 2 3 4;
#X text 98 64 add "2 3 4" to the array element.;
#X msg 30 94 sub 1 2 3;
#X text 98 94 subtract "1 2 3" from the array element.;
#X msg 30 124 mult 3 2 1;
#X text 104 124 multiply the array element by "3 2 1".;
#X msg 30 154 div 4 5 6;
#X text 99 154 divide the array element by "4 5 6".;
#X msg 30 184 cross 3 2 1;
#X msg 30 224 lerp 8 6 4 0.5;
#X text 131 225 linearly interpolate the array element towards "8 6
4" with the control amount of "0.5".;
#X text 112 185 set the array element to the cross product of itself
and "3 2 1".;
#X text 208 295 map the array element from its default coordinate system
origin (0 \, 0 \, 0) \, X direction (1 \, 0 \, 0) \, Y direction (0
\, 1 \, 0) \, Z direction (0 \, 0 \, 1) to a new coordinate system
defined with origin at "0 0 0" \, X direction "2 0 0" \, and Y direction
"0 2 0" \, and Z direction "0 0 2".;
#X msg 30 294 map 0 0 0 2 0 0 0 2 0 0 0 2;
#X msg 30 364 middle 8 6 4;
#X text 118 364 set the array element to the midpoint between itself
and "8 6 4".;
#X msg 30 434 perpendicular 0 1 0;
#X text 160 435 construct a plane using the array element and "0 1
0" (by finding the plane that both lie on) \, and set our 'x' \, 'y'
and 'z' to be the vector that is perpendicular to the constructed plane
(the normal to the plane).;
#X msg 30 494 rotate 90 5 4 0 10 8 0;
#X msg 30 544 rotateRad 1.5 5 4 0 10 8 0;
#X text 84 264 restrict the length(magnitude) of the array element
to "3".;
#X text 178 494 rotate the array element by "90" angle degrees around
the axis specified by "10 8 0" \, using "5 4 0" as the origin of rotation.
;
#X text 203 544 rotate the array element by "1.5" angle radians around
the axis specified by "10 8 0" \, using "5 4 0" as the origin of rotation.
;
#X obj 30 725 print;
#X obj 30 683 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 48 683 outputs bang when editing is done.;
#X obj 30 661 ofEditMesh3dNormal @myMesh3d[1];
#X obj 30 703 ofGetMesh3dNormal @myMesh3d[1];
#X text 93 594 scale the array element up or down so that it has the
requested length "10".;
#X connect 1 0 33 0;
#X connect 2 0 33 0;
#X connect 3 0 33 0;
#X connect 5 0 33 0;
#X connect 7 0 33 0;
#X connect 9 0 33 0;
#X connect 11 0 33 0;
#X connect 13 0 33 0;
#X connect 15 0 33 0;
#X connect 16 0 33 0;
#X connect 20 0 33 0;
#X connect 21 0 33 0;
#X connect 23 0 33 0;
#X connect 25 0 33 0;
#X connect 26 0 33 0;
#X connect 31 0 34 0;
#X connect 33 0 31 0;
#X connect 34 0 30 0;
#X restore 37 78 pd ofEditMesh3dNormal_example;
#N canvas 321 132 601 701 ofEditMesh3dTexCoord_example 0;
#X text 240 571 edit the specified array element.;
#X msg 30 34 assign 3 4;
#X text 104 34 assign "3 4" to the array element.;
#X msg 30 64 add 2 3;
#X text 87 63 add "2 3" to the array element.;
#X msg 30 94 sub 1 2;
#X text 89 94 subtract "1 2" from the array element.;
#X msg 30 124 mult 3 2;
#X text 94 124 multiply the array element by "3 2".;
#X msg 30 154 div 4 5;
#X text 87 154 divide the array element by "4 5".;
#X msg 30 184 lerp 5 4 0.5;
#X text 120 185 linearly interpolate the array element towards "5 4"
with the control amount of "0.5".;
#X msg 30 254 map 0 0 2 0 0 2;
#X msg 30 224 limit 3;
#X msg 30 314 middle 8 6;
#X text 105 314 set the array element to the midpoint between itself
and "8 6".;
#X msg 30 354 normalize;
#X msg 30 384 perpendicular;
#X msg 30 424 rotate 90 5 4;
#X msg 30 464 rotateRad 1.5 5 4;
#X msg 30 504 scale 10;
#X text 88 224 restrict the length(magnitude) of this vector to "3".
;
#X text 99 354 normalize the array element to a length of 1;
#X text 125 385 set the array element to its own normalized perpendicular
(by rotating 90 degrees and normalizing);
#X text 124 425 rotate the array element by "90" angle degrees around
the pivot "5 4".;
#X text 149 464 rotate the array element by "1.5" angle radians around
the pivot "5 4".;
#X text 136 254 map the array element from its default coordinate system
origin (0 \, 0) \, x direction (1 \, 0) \, y direction (0 \, 1) to
a new coordinate system defined with origin at "0 0" \, X direction
"2 0" \, and Y direction "0 2".;
#X obj 30 635 print;
#X obj 30 593 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 48 593 outputs bang when editing is done.;
#X obj 30 571 ofEditMesh3dTexCoord @myMesh3d[1];
#X obj 30 613 ofGetMesh3dTexCoord @myMesh3d[1];
#X text 93 504 scale the array element up or down so that it has the
requested length "10".;
#X connect 1 0 31 0;
#X connect 3 0 31 0;
#X connect 5 0 31 0;
#X connect 7 0 31 0;
#X connect 9 0 31 0;
#X connect 11 0 31 0;
#X connect 13 0 31 0;
#X connect 14 0 31 0;
#X connect 15 0 31 0;
#X connect 17 0 31 0;
#X connect 18 0 31 0;
#X connect 19 0 31 0;
#X connect 20 0 31 0;
#X connect 21 0 31 0;
#X connect 29 0 32 0;
#X connect 31 0 29 0;
#X connect 32 0 28 0;
#X restore 37 98 pd ofEditMesh3dTexCoord_example;
#N canvas 321 131 661 609 ofEditMesh3dColor_example 0;
#X text 222 491 edit the specified array element.;
#X msg 30 314 normalize;
#X msg 30 64 assign turquoise;
#X msg 30 34 assign 0 153 37 255;
#X text 158 34 assign "0 153 37 255" to the array element.;
#X text 141 64 you can assign using the color name.;
#X msg 30 94 assign 0x3293ef;
#X msg 30 274 lerp 255 255 255 255 0.5;
#X text 191 275 linearly interpolate the array element towards "255
255 255 255" with the control amount of "0.5".;
#X text 98 314 normalize the array element to a length of 255;
#X msg 30 244 invert;
#X text 81 244 invert the array element. (subtract from 255);
#X text 87 344 set the current hue.;
#X text 111 374 set the hue angle between 0 and 360;
#X msg 30 374 hueAngle 90;
#X msg 30 404 brightness 128;
#X text 127 404 set the current brightness.;
#X msg 30 434 saturation 128;
#X text 127 434 set the current saturation.;
#X msg 30 344 hue 128;
#X obj 30 555 print;
#X obj 30 513 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 48 513 outputs bang when editing is done.;
#X msg 30 124 add 10;
#X msg 30 154 sub 10;
#X msg 30 214 div 2;
#X text 80 124 add "10" to the array element.;
#X text 79 154 subtract "10" from the array element.;
#X text 81 184 multiply the array element by "2".;
#X text 75 214 divide the array element by "2".;
#X msg 30 184 mult 2;
#X text 135 94 you can also use the hex color code.;
#X obj 30 491 ofEditMesh3dColor @myMesh3d[1];
#X obj 30 533 ofGetMesh3dColor @myMesh3d[1];
#X connect 1 0 32 0;
#X connect 2 0 32 0;
#X connect 3 0 32 0;
#X connect 6 0 32 0;
#X connect 7 0 32 0;
#X connect 10 0 32 0;
#X connect 14 0 32 0;
#X connect 15 0 32 0;
#X connect 17 0 32 0;
#X connect 19 0 32 0;
#X connect 21 0 33 0;
#X connect 23 0 32 0;
#X connect 24 0 32 0;
#X connect 25 0 32 0;
#X connect 30 0 32 0;
#X connect 32 0 21 0;
#X connect 33 0 20 0;
#X restore 37 118 pd ofEditMesh3dColor_example;
#X restore 160 120 pd related_editor_objects;
#X text 11 23 store a set of arrays for a 3d mesh;
#X text 21 43 [ofLoadMesh3d] stores a set of arrays for a 3d mesh that
can be edited \, drawn to the screen \, or used by its related "getter"
objects.;
#X obj 462 46 declare -lib ofelia;
#X connect 49 0 64 0;
#X connect 64 0 37 0;
#X connect 64 1 38 0;
#X connect 64 2 39 0;
#X connect 64 3 40 0;
#X connect 64 4 41 0;
