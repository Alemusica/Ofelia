#N canvas 321 23 601 543 10;
#X declare -lib ofelia;
#X obj 0 0 cnv 15 580 40 empty empty ofDoesShaderNameExist 3 12 0 18
-204280 -1 0;
#X obj 0 341 cnv 3 580 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 0 400 cnv 3 580 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 75 349 cnv 17 3 40 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 75 408 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 0 485 cnv 15 580 21 empty empty empty 20 12 0 14 -228856 -66577
0;
#X obj 0 436 cnv 3 580 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X text 95 408 float;
#X text 72 459 1) symbol;
#X obj 26 202 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 26 253 5 0 0 0 - - -, f 5;
#X text 95 349 bang;
#X text 95 369 name <s>;
#N canvas 322 116 507 253 about_vector 0;
#X text 26 23 in ofelia \, a vector data structure is commonly used
for handling various data types such as float \, symbol and list. vectors
are much like arrays that can dynamically be changed in size.;
#X text 26 163 each "loader" object should have a unique variable name
so its data can be properly accessed by "getter" objects that use the
name.;
#X text 26 93 in general \, objects that use vector are divided into
two types \, "loader" objects that can store an array of data and "getter"
objects that can read the stored data from "loader" objects.;
#X restore 486 66 pd about_vector;
#X text 70 253 0: not exists \, 1: exists.;
#X text 241 408 - 0: not exists \, 1: exists.;
#X obj 462 46 declare -lib ofelia;
#X text 11 23 check the existence of a shader variable name;
#X obj 445 5 ofDoesShaderNameExist;
#X obj 26 90 ofLoadShader @myShader;
#X obj 26 226 ofDoesShaderNameExist @myShader;
#X text 49 201 check if the shader variable name exists or not.;
#X text 241 349 - checks the existence of a shader variable name.;
#X text 241 369 - sets the shader variable name to check.;
#X text 241 459 - sets the shader variable name to check.;
#X connect 9 0 20 0;
#X connect 20 0 10 0;
