#N canvas 321 23 601 745 10;
#X obj 0 0 cnv 15 580 40 empty empty ofLoadImage 3 12 0 18 -204280
-1 0;
#X obj 0 361 cnv 3 580 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 0 560 cnv 3 580 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 75 369 cnv 17 3 180 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 75 568 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 0 688 cnv 15 580 21 empty empty empty 20 12 0 14 -228856 -66577
0;
#X obj 0 619 cnv 3 580 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X text 95 369 name <s>;
#X text 95 389 load <l>;
#X text 95 429 append <l>;
#X text 95 449 prepend <l>;
#X text 95 509 erase <f \, f>;
#X text 95 529 clear;
#X text 72 642 1) symbol;
#X text 72 662 2) list;
#N canvas 321 131 507 253 about_vector 0;
#X text 26 23 in ofelia \, a vector data structure is commonly used
for handling various data types such as float \, symbol and list. vectors
are much like arrays that can dynamically be changed in size.;
#X text 26 163 each "loader" object should have a unique variable name
so its data can be properly accessed by "getter" objects that use the
name.;
#X text 26 93 in general \, objects that use vector are divided into
two types \, "loader" objects that can store an array of data and "getter"
objects that can read the stored data from "loader" objects.;
#X restore 486 46 pd about_vector;
#X text 233 179 the number of elements stored in the array.;
#N canvas 321 23 600 835 related_getter_objects 0;
#X obj 30 32 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 122 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 212 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 302 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 417 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 30 83 5 0 0 0 - - -, f 5;
#X symbolatom 30 173 70 0 0 0 - - -, f 70;
#X floatatom 30 263 5 0 0 0 - - -, f 5;
#X obj 30 353 unpack f f;
#X floatatom 30 376 5 0 0 0 - - -, f 5;
#X floatatom 87 376 5 0 0 0 - - -, f 5;
#X text 129 375 width \, height.;
#X floatatom 30 468 5 0 0 0 - - -, f 5;
#X text 127 514 get the color of a pixel at the specified x \, y index.
;
#X msg 30 514 0 0;
#X obj 30 568 print;
#X text 73 569 outputs r \, g \, b \, a value of the color.;
#X text 87 613 get the texture coordinate of the image from 2d vertex.
;
#X obj 30 668 print;
#X obj 30 788 print;
#X text 41 735 get the texture coordinates of the image from 2d vertices.
;
#X msg 68 514 799 599;
#X text 72 83 0: not exists \, 1: exists.;
#X text 53 31 check if the image variable name exists or not.;
#X obj 30 56 ofDoesImageNameExist @myImages;
#X obj 30 146 ofGetImagePath @myImages[0];
#X obj 30 326 ofGetImageDimen @myImages[0];
#X obj 30 441 ofGetImageType @myImages[0];
#X obj 30 541 ofGetImageColorAt @myImages[0];
#X obj 30 641 ofGetImageTexCoord @myImages[0];
#X obj 30 761 ofGetImageTexCoords @myImages[0];
#X msg 30 613 100 100;
#X msg 30 713 0 0 800 0 800 600 0 600;
#X text 53 301 get the dimensions of the image.;
#X text 53 416 get the type of the image.;
#X text 53 121 get the absolute path of the image.;
#X obj 30 236 ofIsImageAllocated @myImages[0];
#X text 53 211 check if the image is allocated or not.;
#X text 72 263 0: not allocated \, 1: allocated.;
#X text 73 468 0: GRAY \, 1: RGB \, 2: RGBA.;
#X connect 0 0 24 0;
#X connect 1 0 25 0;
#X connect 2 0 36 0;
#X connect 3 0 26 0;
#X connect 4 0 27 0;
#X connect 8 0 9 0;
#X connect 8 1 10 0;
#X connect 14 0 28 0;
#X connect 21 0 28 0;
#X connect 24 0 5 0;
#X connect 25 0 6 0;
#X connect 26 0 8 0;
#X connect 27 0 12 0;
#X connect 28 0 15 0;
#X connect 29 0 18 0;
#X connect 30 0 19 0;
#X connect 31 0 29 0;
#X connect 32 0 30 0;
#X connect 36 0 7 0;
#X restore 23 278 pd related_getter_objects;
#X obj 23 339 ofWindow 320 240 LEFT TOP;
#X floatatom 194 179 5 0 0 0 - - -, f 5;
#X obj 23 199 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 41 199 outputs bang when loading is done.;
#N canvas 322 131 790 406 image_example 0;
#X msg 36 33 print;
#X obj 36 333 outlet;
#X text 85 33 print the current settings and stored array elements.
;
#X msg 36 270 clear;
#X text 85 270 remove all elements from the array.;
#X msg 36 128 erase 0 0;
#X text 107 128 remove the index range "0~0".;
#X msg 36 170 add examples/data/background.jpg;
#X msg 36 220 fill examples/data/background.jpg 0 0;
#X msg 36 83 load examples/data/background.jpg examples/data/texture.jpg
;
#X text 407 83 (re)initialize an array with "examples/data/background.jpg"
\, "examples/data/texture.jpg".;
#X text 245 171 add an element "examples/data/background.jpg" to the
end of the array.;
#X text 276 220 assign "examples/data/background.jpg" to the index
range "0~0".;
#X connect 0 0 1 0;
#X connect 3 0 1 0;
#X connect 5 0 1 0;
#X connect 7 0 1 0;
#X connect 8 0 1 0;
#X connect 9 0 1 0;
#X restore 23 101 pd image_example;
#X text 95 409 add <s>;
#X text 95 469 insert <s \, f \, f>;
#X text 95 489 fill <s \, f \, f>;
#X obj 75 591 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 95 591 float;
#X text 241 591 - the number of elements stored in the array.;
#X text 95 568 bang;
#X text 241 568 - outputs bang when loading is done.;
#X obj 505 5 ofLoadImage;
#X text 241 369 - sets the unique variable name for the array.;
#X text 241 389 - (re)initializes an array with one or more elements.
;
#X text 241 409 - adds a single element to the end of the array.;
#X text 241 429 - appends one or more elements to the array.;
#X text 241 449 - prepends one or more elements to the array.;
#X text 241 469 - inserts an element at the specified position.;
#X text 241 489 - assigns value to all the elements in the range.;
#X text 241 509 - removes a range of elements from the array.;
#X text 241 529 - removes all elements from the array.;
#X text 241 642 - sets the unique variable name for the array.;
#X text 241 662 - initializes an array with one or more elements.;
#N canvas 322 132 600 505 related_editor_objects 0;
#X obj 71 380 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 91 380 switch the image to edit.;
#N canvas 321 132 684 567 image_texture 0;
#X obj 36 491 outlet;
#X msg 36 63 generateMipmap;
#X text 137 63 generate mipmap for the current texture.;
#X text 220 113 set texture minification/magnification scaling filters.
;
#X msg 36 113 minMagFilter NEAREST NEAREST;
#X text 75 146 minification scaling filter options.;
#X text 75 216 magnification scaling filter options.;
#X text 75 316 horizontal wrap mode options.;
#X text 75 356 vertical wrap mode options.;
#X msg 36 263 texWrap REPEAT REPEAT;
#X text 178 263 set how the texture wraps around the edges of the vertices
horizontally and vertically. by default \, textures are clamped to
their edges with CLAMP_TO_EDGE.;
#X text 75 163 0: NEAREST \, 1: LINEAR \, 2:NEAREST_MIPMAP_NEAREST
\, 3:LINEAR_MIPMAP_NEAREST \, 4:NEAREST_MIPMAP_LINEAR \, 5:LINEAR_MIPMAP_LINEAR.
;
#X text 75 233 0: NEAREST \, 1: LINEAR.;
#X text 75 333 0: REPEAT \, 1: MIRRORED_REPEAT \, 2: CLAMP_TO_EDGE.
;
#X text 75 373 0: REPEAT \, 1: MIRRORED_REPEAT \, 2: CLAMP_TO_EDGE.
;
#X msg 36 414 alphaMask @myImages[1];
#X text 184 414 set another image(or fbo) to use as an alpha mask.
;
#X connect 1 0 0 0;
#X connect 4 0 0 0;
#X connect 9 0 0 0;
#X connect 15 0 0 0;
#X restore 51 192 pd image_texture;
#N canvas 322 132 600 280 image_type 0;
#X obj 36 221 outlet;
#X obj 111 64 vradio 15 1 0 3 empty empty empty 0 -8 0 10 -262144 -1
-1 1;
#X obj 36 137 ofPack type 0;
#X floatatom 111 116 5 0 0 0 - - -, f 5;
#X text 133 79 1: RGB;
#X text 133 94 2: RGBA;
#X text 133 63 0: GRAY;
#X text 128 140 it sets the number of channels used to represent a
color per pixel. GRAY will use 1 channel \, RGB will use 3 channels
and RGBA will use 4 channels.;
#X text 111 41 set the type of the image.;
#X connect 1 0 3 0;
#X connect 2 0 0 0;
#X connect 3 0 2 1;
#X restore 51 239 pd image_type;
#N canvas 321 132 696 383 image_clone 0;
#X obj 36 291 outlet;
#X text 35 195 clone the specified image.;
#X obj 366 93 ofTranslate 40 40;
#X obj 366 137 ofStar 30 12 5;
#X obj 366 115 ofSetColor yellow;
#X obj 366 48 ofHead;
#X text 365 194 clone the specified fbo.;
#X obj 366 291 ofEditImage @myImages[1];
#X obj 366 71 ofCreateFbo @myFbo 80 80 RGB orange;
#X msg 36 216 clone @myImages[1];
#X msg 366 216 clone @myFbo;
#X connect 2 0 4 0;
#X connect 4 0 3 0;
#X connect 5 0 8 0;
#X connect 8 0 2 0;
#X connect 9 0 0 0;
#X connect 10 0 7 0;
#X restore 51 286 pd image_clone;
#N canvas 321 131 597 287 image_resize 0;
#X obj 36 201 outlet;
#X msg 36 63 resize 600 450;
#X msg 36 113 crop 100 100 400 300;
#X text 137 63 resize the image to a new size. (w \, h);
#X text 172 113 crop the image. (x \, y \, w \, h);
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X restore 51 145 pd image_resize;
#N canvas 322 132 659 427 image_processing 0;
#X msg 36 62 grayscale;
#X text 107 80 note: it will not affect the allocated image type.;
#X msg 36 112 invert;
#X text 89 112 invert the colors of the image.;
#X msg 36 152 brightness 30;
#X msg 36 192 contrast 30;
#X msg 36 232 gamma 2;
#X obj 36 341 outlet;
#X msg 36 273 mirror ON OFF;
#X text 130 273 flip the pixels of the image vertically and/or horizontally.
;
#X text 107 62 convert the image to grayscale. (0.299r + 0.587g + 0.114b)
;
#X text 131 152 change the brightness of the image. (range: -255~255)
;
#X text 118 192 change the contrast of the image. (range: -255~255)
;
#X text 93 232 change the gamma of the image. (range: 0~);
#X connect 0 0 7 0;
#X connect 2 0 7 0;
#X connect 4 0 7 0;
#X connect 5 0 7 0;
#X connect 6 0 7 0;
#X connect 8 0 7 0;
#X restore 51 98 pd image_processing;
#N canvas 321 131 597 287 image_screenshot 0;
#X obj 36 201 outlet;
#X msg 36 63 grabScreen 0 0 320 240;
#X text 184 63 take a screenshot. (x \, y \, w \, h);
#X connect 1 0 0 0;
#X restore 51 333 pd image_screenshot;
#X obj 51 430 ofEditImage @myImages[0];
#N canvas 322 132 597 287 image_coloring 0;
#X obj 36 201 outlet;
#X msg 36 63 color skyBlue;
#X msg 36 113 colorAt 100 300 red;
#X text 167 113 color a pixel at the specified x \, y position.;
#X text 130 63 color the whole image.;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X restore 51 51 pd image_coloring;
#X connect 0 0 8 0;
#X connect 2 0 8 0;
#X connect 3 0 8 0;
#X connect 4 0 8 0;
#X connect 5 0 8 0;
#X connect 6 0 8 0;
#X connect 7 0 8 0;
#X connect 9 0 8 0;
#X restore 23 238 pd related_editor_objects;
#N canvas 321 133 647 587 related_drawer_objects 0;
#X obj 63 38 loadbang;
#X obj 63 59 ofGetLastRenderOrder;
#X obj 30 80 ofHead;
#X obj 30 101 ofClear 63;
#X obj 50 138 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 70 138 switch the image.;
#X text 235 174 draw the stored image.;
#X text 205 451 bind the stored image's texture.;
#X obj 30 252 ofTranslate 160 120;
#X obj 30 476 ofSetDepthTest ON;
#X obj 30 523 ofSetDepthTest OFF;
#X obj 30 500 ofBox 80 80 80;
#X obj 30 353 t b b;
#X text 319 225 draw a subsection of the image.;
#X obj 30 326 ofSetColor white;
#X msg 50 289 set yellow;
#X obj 30 199 ofSetColor 230;
#X text 126 199 slightly darken the below image.;
#X text 126 289 change the color for the below image. (white = original)
;
#X obj 57 377 ofGetFrameNum;
#X obj 30 173 ofDrawImage @myImages[0] 320 240;
#X obj 30 225 ofDrawSubImage @myImages[0] 100 75 0 0 400 300;
#X obj 30 451 ofBindImageTex @myImages[1];
#X obj 30 425 ofRotateXYZ;
#X connect 0 0 1 0;
#X connect 1 0 2 1;
#X connect 2 0 3 0;
#X connect 3 0 20 0;
#X connect 4 0 20 0;
#X connect 8 0 14 0;
#X connect 9 0 11 0;
#X connect 11 0 10 0;
#X connect 12 0 23 0;
#X connect 12 1 19 0;
#X connect 14 0 12 0;
#X connect 15 0 14 0;
#X connect 16 0 21 0;
#X connect 19 0 23 1;
#X connect 19 0 23 2;
#X connect 19 0 23 3;
#X connect 20 0 16 0;
#X connect 21 0 8 0;
#X connect 22 0 9 0;
#X connect 23 0 22 0;
#X restore 23 258 pd related_drawer_objects;
#N canvas 321 133 516 355 related_saver_objects 0;
#X obj 36 39 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X symbolatom 36 112 60 0 0 0 - - -, f 60;
#X obj 36 66 ofGetPatchDirectory;
#X obj 36 252 ofPrepend save;
#X text 59 38 save the image.;
#X obj 81 144 vradio 15 1 0 5 empty empty empty 0 -8 0 10 -262144 -1
-1 0;
#X text 102 143 0: BEST;
#X obj 36 225 pack s 0;
#X text 102 159 1: HIGH;
#X text 102 174 2: MIDIUM;
#X text 102 189 3: LOW;
#X text 102 204 4: WORST;
#X obj 36 276 ofSaveImage @myImages[0];
#X text 99 225 you can optionally set the quality of the image.;
#X obj 36 89 makefilename %s/examples/data/myImage.jpg;
#X connect 0 0 2 0;
#X connect 1 0 7 0;
#X connect 2 0 14 0;
#X connect 3 0 12 0;
#X connect 5 0 7 1;
#X connect 7 0 3 0;
#X connect 14 0 1 0;
#X restore 23 298 pd related_saver_objects;
#X text 11 23 store an array of images;
#X text 21 43 [ofLoadImage] stores an array of images that can be edited
\, bound as a texture \, drawn directly to the screen \, or used by
its related "getter" objects.;
#X obj 23 125 ofLoadImage \; @myImages \; examples/data/background.jpg
\; examples/data/texture.jpg \;;
#X connect 22 0 48 0;
#X connect 48 0 20 0;
#X connect 48 1 19 0;
