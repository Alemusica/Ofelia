#N canvas 321 23 601 561 10;
#X declare -lib ofelia;
#X obj 0 0 cnv 15 580 40 empty empty ofGetVec4fDot 3 12 0 18 -204280
-1 0;
#X obj 0 341 cnv 3 580 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 0 420 cnv 3 580 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 75 349 cnv 17 3 60 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 75 428 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 0 505 cnv 15 580 21 empty empty empty 20 12 0 14 -228856 -66577
0;
#X obj 0 456 cnv 3 580 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X text 72 479 1) symbol;
#N canvas 323 115 507 253 about_vector 0;
#X text 26 23 in ofelia \, a vector data structure is commonly used
for handling various data types such as float \, symbol and list. vectors
are much like arrays that can dynamically be changed in size.;
#X text 26 163 each "loader" object should have a unique variable name
so its data can be properly accessed by "getter" objects that use the
name.;
#X text 26 93 in general \, objects that use vector are divided into
two types \, "loader" objects that can store an array of data and "getter"
objects that can read the stored data from "loader" objects.;
#X restore 486 66 pd about_vector;
#X text 95 389 name <s>;
#X floatatom 26 255 8 0 0 0 - - -, f 8;
#X text 241 389 - sets the variable name followed by the index.;
#X text 241 479 - sets the variable name followed by the index.;
#X text 95 428 float;
#X obj 493 5 ofGetVec4fDot;
#X msg 26 192 3 2 1 0;
#X text 89 192 calculate and return the dot product of the array element
with "3 2 1 0".;
#X text 242 369 - the incoming vec4f to calculate the dot product.
;
#X text 241 428 - the dot product between two vec4fs.;
#X text 95 369 list <f \, f \, f \, f>;
#X obj 26 80 ofLoadVec4f @myVec4fs 7 8 9 10 11 12 13 14;
#X obj 26 228 ofGetVec4fDot @myVec4fs[1];
#X text 95 349 float;
#X text 241 349 - sets the index of the array element.;
#X text 11 24 get the dot product of two vec4fs;
#X obj 462 46 declare -lib ofelia;
#X connect 15 0 21 0;
#X connect 21 0 10 0;
