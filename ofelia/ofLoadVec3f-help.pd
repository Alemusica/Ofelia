#N canvas 321 23 601 828 10;
#X obj 0 0 cnv 15 580 40 empty empty ofLoadVec3f 3 12 0 18 -204280
-1 0;
#X obj 0 471 cnv 3 580 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 0 670 cnv 3 580 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 75 479 cnv 17 3 180 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 75 678 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 0 775 cnv 15 580 21 empty empty empty 20 12 0 14 -228856 -66577
0;
#X obj 0 706 cnv 3 580 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X text 95 678 float;
#X text 95 479 name <s>;
#X text 95 499 load <l>;
#X text 95 539 append <l>;
#X text 95 559 prepend <l>;
#X text 95 619 erase <f \, f>;
#X text 95 639 clear;
#X text 72 729 1) symbol;
#X text 72 749 2) list;
#N canvas 321 123 507 253 about_vector 0;
#X text 26 23 in ofelia \, a vector data structure is commonly used
for handling various data types such as float \, symbol and list. vectors
are much like arrays that can dynamically be changed in size.;
#X text 26 163 each "loader" object should have a unique variable name
so its data can be properly accessed by "getter" objects that use the
name.;
#X text 26 93 in general \, objects that use vector are divided into
two types \, "loader" objects that can store an array of data and "getter"
objects that can read the stored data from "loader" objects.;
#X restore 486 46 pd about_vector;
#X msg 26 93 print;
#X text 71 333 remove all elements from the array.;
#X msg 26 333 clear;
#X floatatom 26 397 5 0 0 0 - - -, f 5;
#X text 261 678 - the number of elements stored in the array.;
#X text 66 397 the number of elements stored in the array.;
#X obj 505 5 ofLoadVec3f;
#X msg 26 213 prepend 0 1 2 3 4 5;
#X text 156 213 prepend "0 1 2" \, "3 4 5" to the array.;
#X msg 26 123 load 6 7 8 9 10 11;
#X msg 26 153 add 12 13 14;
#X text 113 153 add an element "12 13 14" to the end of the array.
;
#X msg 26 183 append 15 16 17 18 19 20;
#X text 185 183 append "15 16 17" \, "18 19 20" to the array.;
#X msg 26 243 insert 5 4 3 2 2;
#X msg 26 273 fill 11 10 9 5 5;
#X msg 26 303 erase 4 7;
#X text 95 519 add <f \, f \, f>;
#X text 95 579 insert <f \, f \, f \, f \, f>;
#X text 95 599 fill <f \, f \, f \, f \, f>;
#X text 75 93 print the name and stored array elements.;
#X text 261 479 - sets the unique variable name for the array.;
#X text 261 499 - (re)initializes an array with one or more elements.
;
#X text 261 519 - adds a single element to the end of the array.;
#X text 261 539 - appends one or more elements to the array.;
#X text 261 559 - prepends one or more elements to the array.;
#X text 261 579 - inserts an element at the specified position.;
#X text 261 599 - assigns value to all the elements in the range.;
#X text 261 619 - removes a range of elements from the array.;
#X text 261 639 - removes all elements from the array.;
#X text 261 729 - sets the unique variable name for the array.;
#X text 261 749 - initializes an array with one or more elements.;
#X text 148 123 (re)initialize an array with "6 7 8" \, "9 10 11".
;
#X text 138 243 insert "5 4 3" to the index range "2~2".;
#X text 138 273 assign "11 10 9" to the index range "5~5".;
#X text 96 303 remove the index range "4~7".;
#X text 11 23 store an array of three dimensional vectors;
#X text 21 43 [ofLoadVec3f] stores an array of three dimensional vectors
that can be edited or used by its related "getter" objects.;
#N canvas 322 86 693 781 related_editor_objects 0;
#X text 187 661 edit the specified array element.;
#X msg 30 264 limit 3;
#X msg 30 404 normalize;
#X msg 30 594 scale 10;
#X text 101 404 normalize the array element to a length of 1;
#X msg 30 34 assign 3 4 5;
#X text 116 34 assign "3 4 5" to the array element.;
#X msg 30 64 add 2 3 4;
#X text 98 64 add "2 3 4" to the array element.;
#X msg 30 94 sub 1 2 3;
#X text 98 94 subtract "1 2 3" from the array element.;
#X msg 30 124 mult 3 2 1;
#X text 107 124 multiply the array element by "3 2 1".;
#X msg 30 154 div 4 5 6;
#X text 99 154 divide the array element by "4 5 6".;
#X msg 30 184 cross 3 2 1;
#X msg 30 224 lerp 8 6 4 0.5;
#X text 131 225 linearly interpolate the array element towards "8 6
4" with the control amount of "0.5".;
#X text 113 185 set the array element to the cross product of itself
and "3 2 1".;
#X text 211 294 map the array element from its default coordinate system
origin (0 \, 0 \, 0) \, X direction (1 \, 0 \, 0) \, Y direction (0
\, 1 \, 0) \, Z direction (0 \, 0 \, 1) to a new coordinate system
defined with origin at "0 0 0" \, X direction "2 0 0" \, and Y direction
"0 2 0" \, and Z direction "0 0 2".;
#X msg 30 294 map 0 0 0 2 0 0 0 2 0 0 0 2;
#X msg 30 364 middle 8 6 4;
#X text 121 364 set the array element to the midpoint between itself
and "8 6 4".;
#X msg 30 434 perpendicular 0 1 0;
#X text 160 434 construct a plane using the array element and "0 1
0" (by finding the plane that both lie on) \, and set our 'x' \, 'y'
and 'z' to be the vector that is perpendicular to the constructed plane
(the normal to the plane).;
#X msg 30 494 rotate 90 5 4 0 10 8 0;
#X msg 30 544 rotateRad 1.5 5 4 0 10 8 0;
#X text 88 264 restrict the length(magnitude) of the array element
to "3".;
#X text 180 494 rotate the array element by "90" angle degrees around
the axis specified by "10 8 0" \, using "5 4 0" as the origin of rotation.
;
#X text 202 544 rotate the array element by "1.5" angle radians around
the axis specified by "10 8 0" \, using "5 4 0" as the origin of rotation.
;
#X obj 30 661 ofEditVec3f @myVec3fs[1];
#X obj 30 725 print;
#X obj 30 683 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 48 683 outputs bang when editing is done.;
#X obj 30 703 ofGetVec3f @myVec3fs[1];
#X text 93 594 scale the array element up or down so that it has the
requested length "10".;
#X connect 1 0 30 0;
#X connect 2 0 30 0;
#X connect 3 0 30 0;
#X connect 5 0 30 0;
#X connect 7 0 30 0;
#X connect 9 0 30 0;
#X connect 11 0 30 0;
#X connect 13 0 30 0;
#X connect 15 0 30 0;
#X connect 16 0 30 0;
#X connect 20 0 30 0;
#X connect 21 0 30 0;
#X connect 23 0 30 0;
#X connect 25 0 30 0;
#X connect 26 0 30 0;
#X connect 30 0 32 0;
#X connect 32 0 34 0;
#X connect 34 0 31 0;
#X restore 26 428 pd related_editor_objects;
#N canvas 322 44 913 830 related_getter_objects 0;
#X obj 30 122 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 232 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 283 print;
#X obj 30 32 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 30 83 5 0 0 0 - - -, f 5;
#X floatatom 30 195 5 0 0 0 - - -, f 5;
#X floatatom 64 195 5 0 0 0 - - -, f 5;
#X text 70 83 0: not exists \, 1: exists.;
#X obj 30 322 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 30 395 5 0 0 0 - - -, f 5;
#X floatatom 64 395 5 0 0 0 - - -, f 5;
#X floatatom 30 493 8 0 0 0 - - -, f 8;
#X floatatom 530 493 8 0 0 0 - - -, f 8;
#X floatatom 30 593 8 0 0 0 - - -, f 8;
#X floatatom 530 593 8 0 0 0 - - -, f 8;
#X text 583 430 calculate and return the angle in radians.;
#X text 587 530 calculate and return the squared distance.;
#X floatatom 30 693 8 0 0 0 - - -, f 8;
#X obj 30 732 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 30 783 8 0 0 0 - - -, f 8;
#X obj 530 732 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 530 783 8 0 0 0 - - -, f 8;
#X text 53 731 return the length(magnitude) of the array element.;
#X text 553 731 return the squared length(magnitude).;
#X text 53 31 check if the vec3f variable name exists or not.;
#X text 53 121 get a vec3f element at the index "1". (starting from
"0");
#X text 53 231 get all vec3f elements as a list.;
#X text 53 321 get the average value of vec3f elements.;
#X obj 30 373 unpack f f f;
#X floatatom 99 395 5 0 0 0 - - -, f 5;
#X msg 30 430 5 20 0;
#X text 84 430 calculate and return the angle in degrees between the
array element and "5 20 0".;
#X msg 530 430 5 20 0;
#X msg 30 630 2 1 0;
#X text 78 630 calculate and return the dot product of the array element
with "2 1 0".;
#X msg 30 530 10 20 0;
#X text 88 530 calculate and return the distance between the array
element and "10 20 0";
#X msg 530 530 10 20 0;
#X obj 30 173 unpack f f f;
#X floatatom 99 195 5 0 0 0 - - -, f 5;
#X obj 30 56 ofDoesVec3fNameExist @myVec3fs;
#X obj 30 146 ofGetVec3f @myVec3fs[1];
#X obj 30 256 ofGetVec3fs @myVec3fs;
#X obj 30 346 ofGetVec3fAverage @myVec3fs;
#X obj 30 466 ofGetVec3fAngle @myVec3fs[1];
#X obj 30 566 ofGetVec3fDist @myVec3fs[1];
#X obj 30 666 ofGetVec3fDot @myVec3fs[1];
#X obj 30 756 ofGetVec3fLength @myVec3fs[1];
#X obj 530 466 ofGetVec3fAngleRad @myVec3fs[1];
#X obj 530 566 ofGetVec3fDistSquared @myVec3fs[1];
#X obj 530 756 ofGetVec3fLengthSquared @myVec3fs[1];
#X connect 0 0 41 0;
#X connect 1 0 42 0;
#X connect 3 0 40 0;
#X connect 8 0 43 0;
#X connect 18 0 47 0;
#X connect 20 0 50 0;
#X connect 28 0 9 0;
#X connect 28 1 10 0;
#X connect 28 2 29 0;
#X connect 30 0 44 0;
#X connect 32 0 48 0;
#X connect 33 0 46 0;
#X connect 35 0 45 0;
#X connect 37 0 49 0;
#X connect 38 0 5 0;
#X connect 38 1 6 0;
#X connect 38 2 39 0;
#X connect 40 0 4 0;
#X connect 41 0 38 0;
#X connect 42 0 2 0;
#X connect 43 0 28 0;
#X connect 44 0 11 0;
#X connect 45 0 13 0;
#X connect 46 0 17 0;
#X connect 47 0 19 0;
#X connect 48 0 12 0;
#X connect 49 0 14 0;
#X connect 50 0 21 0;
#X restore 26 448 pd related_getter_objects;
#X obj 26 370 ofLoadVec3f @myVec3fs 7 8 9 10 11 12 13 14 15;
#X connect 17 0 57 0;
#X connect 19 0 57 0;
#X connect 24 0 57 0;
#X connect 26 0 57 0;
#X connect 27 0 57 0;
#X connect 29 0 57 0;
#X connect 31 0 57 0;
#X connect 32 0 57 0;
#X connect 33 0 57 0;
#X connect 57 0 20 0;
