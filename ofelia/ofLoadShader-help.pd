#N canvas 321 23 601 723 10;
#X declare -lib ofelia;
#X obj 0 0 cnv 15 580 40 empty empty ofLoadShader 3 12 0 18 -204280
-1 0;
#X obj 0 341 cnv 3 580 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 0 540 cnv 3 580 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 75 349 cnv 17 3 180 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 75 548 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 0 668 cnv 15 580 21 empty empty empty 20 12 0 14 -228856 -66577
0;
#X obj 0 599 cnv 3 580 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X text 95 349 name <s>;
#X text 95 369 load <l>;
#X text 95 409 append <l>;
#X text 95 429 prepend <l>;
#X text 95 489 erase <f \, f>;
#X text 95 509 clear;
#X text 72 622 1) symbol;
#X text 72 642 2) list;
#N canvas 321 131 507 253 about_vector 0;
#X text 26 23 in ofelia \, a vector data structure is commonly used
for handling various data types such as float \, symbol and list. vectors
are much like arrays that can dynamically be changed in size.;
#X text 26 163 each "loader" object should have a unique variable name
so its data can be properly accessed by "getter" objects that use the
name.;
#X text 26 93 in general \, objects that use vector are divided into
two types \, "loader" objects that can store an array of data and "getter"
objects that can read the stored data from "loader" objects.;
#X restore 486 66 pd about_vector;
#X text 185 169 the number of elements stored in the array.;
#N canvas 321 134 600 356 related_getter_objects 0;
#X obj 30 32 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 122 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 212 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 30 83 5 0 0 0 - - -, f 5;
#X symbolatom 30 173 70 0 0 0 - - -, f 70;
#X floatatom 30 263 5 0 0 0 - - -, f 5;
#X text 72 83 0: not exists \, 1: exists.;
#X obj 30 56 ofDoesShaderNameExist @myShader;
#X obj 30 146 ofGetShaderPath @myShader[0];
#X text 53 121 get the absolute path of the shader.;
#X obj 30 236 ofIsShaderLoaded @myShader[0];
#X text 53 211 check if the shader is loaded or not.;
#X text 72 263 0: not loaded \, 1: loaded.;
#X text 53 31 check if the shader variable name exists or not.;
#X connect 0 0 7 0;
#X connect 1 0 8 0;
#X connect 2 0 10 0;
#X connect 7 0 3 0;
#X connect 8 0 4 0;
#X connect 10 0 5 0;
#X restore 23 248 pd related_getter_objects;
#X obj 23 319 ofWindow 320 240 LEFT TOP;
#X floatatom 146 169 5 0 0 0 - - -, f 5;
#X obj 23 189 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 41 189 outputs bang when loading is done.;
#X text 95 389 add <s>;
#X text 95 449 insert <s \, f \, f>;
#X text 95 469 fill <s \, f \, f>;
#X obj 75 571 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 95 571 float;
#X text 241 571 - the number of elements stored in the array.;
#X text 95 548 bang;
#X text 241 548 - outputs bang when loading is done.;
#X text 241 349 - sets the unique variable name for the array.;
#X text 241 369 - (re)initializes an array with one or more elements.
;
#X text 241 389 - adds a single element to the end of the array.;
#X text 241 409 - appends one or more elements to the array.;
#X text 241 429 - prepends one or more elements to the array.;
#X text 241 449 - inserts an element at the specified position.;
#X text 241 469 - assigns value to all the elements in the range.;
#X text 241 489 - removes a range of elements from the array.;
#X text 241 509 - removes all elements from the array.;
#X text 241 622 - sets the unique variable name for the array.;
#X text 241 642 - initializes an array with one or more elements.;
#N canvas 321 133 601 374 related_drawer_objects 0;
#X obj 63 38 loadbang;
#X obj 63 59 ofGetLastRenderOrder;
#X obj 30 80 ofHead;
#X obj 30 101 ofClear 63;
#X obj 30 122 t b b;
#X obj 30 244 ofSetShaderUniform2f windowDimen;
#X obj 30 295 ofRectangle;
#X obj 57 142 ofExpr \; _scaleFactor = ofGetRetina * ofGetWindowScale
\; $o1 = ofGetWidth * _scaleFactor \; $o2 = ofGetHeight * _scaleFactor
\; $o3 = ofGetWidth \; $o4 = ofGetHeight \;;
#X text 196 223 apply the shader.;
#X text 233 244 set the value of uniform "windowDimen" which is used
in shader.frag.;
#X obj 30 223 ofApplyShader @myShader[0];
#X connect 0 0 1 0;
#X connect 1 0 2 1;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 10 0;
#X connect 4 1 7 0;
#X connect 5 0 6 0;
#X connect 7 0 5 1;
#X connect 7 1 5 2;
#X connect 7 2 6 1;
#X connect 7 3 6 2;
#X connect 10 0 5 0;
#X restore 23 228 pd related_drawer_objects;
#X obj 462 46 declare -lib ofelia;
#X text 11 23 store an array of shaders;
#X obj 499 5 ofLoadShader;
#N canvas 322 131 790 406 shader_example 0;
#X msg 36 33 print;
#X obj 36 333 outlet;
#X text 85 33 print the current settings and stored array elements.
;
#X msg 36 270 clear;
#X text 85 270 remove all elements from the array.;
#X msg 36 128 erase 0 0;
#X text 104 128 remove the index range "0~0".;
#X text 203 83 (re)initialize an array with "examples/data/shader".
;
#X msg 36 83 load examples/data/shader;
#X msg 36 170 add examples/data/shader;
#X text 196 171 add an element "examples/data/shader" to the end of
the array.;
#X msg 36 220 fill examples/data/shader 0 0;
#X text 226 220 assign "examples/data/shader" to the index range "0~0".
;
#X connect 0 0 1 0;
#X connect 3 0 1 0;
#X connect 5 0 1 0;
#X connect 8 0 1 0;
#X connect 9 0 1 0;
#X connect 11 0 1 0;
#X restore 23 101 pd shader_example;
#X obj 23 125 ofLoadShader \; @myShader \; examples/data/shader \;
;
#X text 159 148 load .vert and .frag shaders from the path.;
#X text 21 43 [ofLoadShader] stores an array of shaders that can be
applied to other drawings \, or used by its related "getter" and "setter"
objects.;
#N canvas 321 23 615 832 related_setter_objects 0;
#X text 246 59 set a int uniform on the shader.;
#X text 246 79 set a ivec2 uniform on the shader.;
#X text 246 99 set a ivec3 uniform on the shader.;
#X text 246 119 set a ivec4 uniform on the shader.;
#X text 246 149 set a float uniform on the shader.;
#X text 246 169 set a vec2 uniform on the shader.;
#X text 246 189 set a vec3 uniform on the shader.;
#X text 246 209 set a vec4 uniform on the shader.;
#X text 253 239 set an array of int uniform on the shader.;
#X text 253 260 set an array of ivec2 uniform on the shader.;
#X text 253 279 set an array of ivec3 uniform on the shader.;
#X text 253 299 set an array of ivec4 uniform on the shader.;
#X text 253 329 set an array of float uniform on the shader.;
#X text 253 350 set an array of vec2 uniform on the shader.;
#X text 253 369 set an array of vec3 uniform on the shader.;
#X text 253 389 set an array of vec4 uniform on the shader.;
#X text 252 419 set a texture reference on the shader.;
#X text 271 469 set 2 short attributes on the shader.;
#X text 271 489 set 3 short attributes on the shader.;
#X text 271 509 set 4 short attributes on the shader.;
#X text 271 559 set 2 float attributes on the shader.;
#X text 271 579 set 3 float attributes on the shader.;
#X text 271 599 set 4 float attributes on the shader.;
#X text 271 649 set 2 double attributes on the shader.;
#X text 271 449 set 1 short attribute on the shader.;
#X text 271 539 set 1 float attribute on the shader.;
#X text 271 629 set 1 double attribute on the shader.;
#X text 271 669 set 3 double attributes on the shader.;
#X text 271 689 set 4 double attributes on the shader.;
#X text 278 719 set an array of 1 float attribute on the shader.;
#X text 278 739 set an array of 2 float attributes on the shader.;
#X text 278 759 set an array of 3 float attributes on the shader.;
#X text 278 779 set an array of 4 float attributes on the shader.;
#X obj 40 59 ofSetShaderUniform1i uniformName;
#X obj 40 79 ofSetShaderUniform2i uniformName;
#X obj 40 99 ofSetShaderUniform3i uniformName;
#X obj 40 119 ofSetShaderUniform4i uniformName;
#X obj 40 149 ofSetShaderUniform1f uniformName;
#X obj 40 169 ofSetShaderUniform2f uniformName;
#X obj 40 189 ofSetShaderUniform3f uniformName;
#X obj 40 209 ofSetShaderUniform4f uniformName;
#X obj 40 239 ofSetShaderUniform1iv uniformName;
#X obj 40 259 ofSetShaderUniform2iv uniformName;
#X obj 40 279 ofSetShaderUniform3iv uniformName;
#X obj 40 299 ofSetShaderUniform4iv uniformName;
#X obj 40 329 ofSetShaderUniform1fv uniformName;
#X obj 40 349 ofSetShaderUniform2fv uniformName;
#X obj 40 369 ofSetShaderUniform3fv uniformName;
#X obj 40 389 ofSetShaderUniform4fv uniformName;
#X obj 40 419 ofSetShaderUniformTex uniformName;
#X obj 40 449 ofSetShaderAttribute1s attributeName;
#X obj 40 469 ofSetShaderAttribute2s attributeName;
#X obj 40 489 ofSetShaderAttribute3s attributeName;
#X obj 40 509 ofSetShaderAttribute4s attributeName;
#X obj 40 539 ofSetShaderAttribute1f attributeName;
#X obj 40 559 ofSetShaderAttribute2f attributeName;
#X obj 40 579 ofSetShaderAttribute3f attributeName;
#X obj 40 599 ofSetShaderAttribute4f attributeName;
#X obj 40 629 ofSetShaderAttribute1d attributeName;
#X obj 40 649 ofSetShaderAttribute2d attributeName;
#X obj 40 669 ofSetShaderAttribute3d attributeName;
#X obj 40 689 ofSetShaderAttribute4d attributeName;
#X obj 40 719 ofSetShaderAttribute1fv attributeName;
#X obj 40 739 ofSetShaderAttribute2fv attributeName;
#X obj 40 759 ofSetShaderAttribute3fv attributeName;
#X obj 40 779 ofSetShaderAttribute4fv attributeName;
#X text 40 16 these setters should be used after [ofApplyShader] to
have effect on the shader.;
#X restore 23 268 pd related_setter_objects;
#X connect 45 0 46 0;
#X connect 46 0 20 0;
#X connect 46 1 19 0;
