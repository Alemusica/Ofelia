#N canvas 641 23 694 592 10;
#X obj 27 102 ofWindow 640 400 LEFT TOP;
#X text 135 490 display the image.;
#X obj 27 226 ofCountUntil;
#X obj 27 248 t b f;
#X obj 27 292 ofCountUntil;
#X obj 27 314 t f f;
#X obj 27 358 pack f f f f 255;
#X obj 96 336 -;
#X obj 96 314 swap 255;
#X obj 27 380 ofPrepend colorAt;
#X text 135 358 color a pixel at the specified x \, y position.(x \,
y \, r \, g \, b);
#X obj 27 468 ofTranslate 80 72;
#X obj 27 124 ofSetBgColor 0;
#X text 346 535 This example was originally written in Processing.
https://processing.org/examples/createimage.html;
#X obj 27 204 unpack f f;
#X obj 27 270 f;
#X obj 27 182 ofGetImageDimen @img;
#X obj 27 402 ofEditImage @img;
#X obj 27 490 ofDrawImage @img;
#X obj 27 424 1;
#X obj 27 446 ofHead 50 OFF;
#X text 58 424 enable rendering.;
#X obj 27 160 ofCreateImage @img 255 255 RGB;
#X text 25 23 you can use [ofCreateImage] object to allocate memory
for an image and then modify its pixels by sending "colorAt" message
to [ofEditImage] object. this example creates an image color gradient.
;
#X text 159 182 get dimensions of the image.;
#X text 219 160 allocate an image. (width \, height \, type);
#X connect 0 0 12 0;
#X connect 2 0 3 0;
#X connect 3 0 15 0;
#X connect 3 1 6 1;
#X connect 3 1 8 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 5 1 6 2;
#X connect 6 0 9 0;
#X connect 7 0 6 3;
#X connect 8 0 7 0;
#X connect 8 1 7 1;
#X connect 9 0 17 0;
#X connect 11 0 18 0;
#X connect 14 0 2 0;
#X connect 14 1 15 1;
#X connect 15 0 4 0;
#X connect 16 0 14 0;
#X connect 17 0 19 0;
#X connect 19 0 20 0;
#X connect 20 0 11 0;
#X connect 22 0 16 0;
