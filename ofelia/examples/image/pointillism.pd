#N canvas 641 23 683 667 10;
#X declare -lib ofelia;
#X text 272 201 load an image from the specified path.;
#X obj 27 143 ofMouseListener;
#X obj 70 164 ofDefine @mouseX = $i2;
#X obj 27 339 t b b;
#X obj 27 221 ofGetImageDimen @img;
#X obj 54 507 ofGetImageColorAt @img;
#X obj 54 458 pack f f;
#X obj 54 360 ofExpr \; $o1 = random(0 \, @imgWidth) \; $o2 = random(0
\, @imgHeight) \; $o3 = @mouseX \; $o4 = 0 \; $o5 = ofGetWidth \; $o6
= @smallPoint \; $o7 = @largePoint \;, f 47;
#X obj 27 573 ofCircle;
#X obj 54 529 unpack f f f;
#X obj 27 480 ofTranslate;
#X obj 27 551 ofSetColor 255 128;
#X obj 27 107 ofSetBgAuto OFF;
#X obj 27 85 ofWindow 640 400 LEFT TOP 1 255;
#X text 330 608 This example was originally written in Processing.
https://processing.org/examples/pointillism.html;
#X text 129 107 disable the auto background clearing function.;
#X text 25 23 mouse horizontal location controls size of dots. create
a simple pointillist effect using circles colored according to pixels
in an image.;
#X text 198 508 get the color of a pixel at the specified x \, y index.
;
#X text 87 573 draw a circle.;
#X text 159 221 get the dimensions of the image.;
#X obj 27 200 ofLoadImage @img ../data/background.jpg;
#X obj 27 318 ofHead 50 OFF;
#X obj 27 242 ofDefine \; @smallPoint = 2 \; @largePoint = 20 \; @imgWidth
= $i1 \; @imgHeight = $i2 \; $o1 = 1 \;;
#X obj 532 29 declare -lib ofelia;
#X obj 147 458 ofMap 0 0 0 0 ON, f 32;
#X connect 1 1 2 0;
#X connect 3 0 10 0;
#X connect 3 1 7 0;
#X connect 4 0 22 0;
#X connect 5 0 9 0;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
#X connect 7 0 10 1;
#X connect 7 1 6 1;
#X connect 7 1 10 2;
#X connect 7 2 24 0;
#X connect 7 3 24 1;
#X connect 7 4 24 2;
#X connect 7 5 24 3;
#X connect 7 6 24 4;
#X connect 9 0 11 1;
#X connect 9 1 11 2;
#X connect 9 2 11 3;
#X connect 10 0 11 0;
#X connect 11 0 8 0;
#X connect 13 0 12 0;
#X connect 20 0 4 0;
#X connect 21 0 3 0;
#X connect 22 0 21 0;
#X connect 24 0 8 1;
