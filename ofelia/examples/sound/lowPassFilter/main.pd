#N canvas 593 100 847 727 10;
#X declare -path ofelia/libs/pd;
#X obj 27 633 dac~;
#X obj 27 607 *~ 0.1;
#X obj 253 108 hsl 128 15 20 10000 0 1 empty empty empty -2 -8 0 10
-262144 -1 -1 1000 1;
#X floatatom 250 128 5 0 0 0 - - -;
#X obj 477 108 hsl 128 15 1 40 0 1 empty empty empty -2 -8 0 10 -262144
-1 -1 5200 1;
#X floatatom 474 128 5 0 0 0 - - -;
#X obj 250 169 line~;
#X obj 474 169 line~;
#X msg 250 148 \$1 100;
#X msg 474 148 \$1 100;
#X obj 27 169 noise~;
#X text 250 91 Sets cutoff frequency in Hz.;
#X text 472 91 Sets resonance. (range: 1 ~ 40);
#X text 71 169 Incoming noise signal.;
#X text 25 23 This example shows how to create a Low-pass filter with
a resonance control. The "-s31" flag creates 3 signal inlets and 1
signal outlet. ofelia.perform() function is called at each DSP-cycle.
The function takes input audio buffer as table parameters and returns
a table for output audio buffer.;
#X text 485 224 ofelia.perform() takes 3 sample table parameters since
the object has 3 signal inlets.;
#X text 485 574 ofelia.perform() returns 1 sample table since the object
has 1 signal outlet.;
#X obj 648 29 declare -path ofelia/libs/pd;
#X obj 492 407 pdLowPass~;
#X text 490 354 <- This object works identically as the [pdLowPass~]
abstraction which uses the built-in pdFilter() class allowing users
to use various types of filters.;
#X text 564 406 <- Right click and see the help file.;
#X obj 27 190 ofelia d -s31 \; local inlet = pdInlet(this) \; local
ax1 \, ax2 \, ay1 \, ay2 = 0 \, 0 \, 0 \, 0 \; function ofelia.perform(s1
\, s2 \, s3) \; local sampleRate = pdGetSampleRate() \; local nyquist
= sampleRate * 0.5 \; local x1 \, x2 \, y1 \, y2 = ax1 \, ax2 \, ay1
\, ay2 \; for i=1 \, #s1 do \; local x0 = s1[i] \; local cutoff = s2[i]
\; local res = math.max(s3[i] \, 1) \; local omega = TWO_PI * cutoff
/ sampleRate \; local cs = math.cos(omega) \; local alpha = math.sin(omega)
/ (2 * res) \; local b1 = 1 - cs \; local b0 = b1 * 0.5 \; local b2
= b0 \; local a0 = 1 + alpha \; local a1 = -2 * cs \; local a2 = 1
- alpha \; local y0 = (b0/a0)*x0 + (b1/a0)*x1 + (b2/a0)*x2 - (a1/a0)*y1
- (a2/a0)*y2 \; if pdIsBigOrSmall(y0) then \; s1[i] = 0 \; else \;
s1[i] = y0 \; end \; x2 = x1 \; x1 = x0 \; y2 = y1 \; y1 = s1[i] \;
end \; ax1 = x1 \; ax2 = x2 \; ay1 = y1 \; ay2 = y2 \; return s1 \;
end \;;
#X f 75;
#X connect 1 0 0 0;
#X connect 1 0 0 1;
#X connect 2 0 3 0;
#X connect 3 0 8 0;
#X connect 4 0 5 0;
#X connect 5 0 9 0;
#X connect 6 0 21 1;
#X connect 7 0 21 2;
#X connect 8 0 6 0;
#X connect 9 0 7 0;
#X connect 10 0 21 0;
#X connect 21 0 1 0;
