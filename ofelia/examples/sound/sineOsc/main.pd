#N canvas 720 100 674 583 10;
#X declare -path ofelia/libs/pd;
#X obj 27 437 dac~;
#X obj 27 124 sig~ 440;
#X floatatom 27 104 5 0 0 0 - - -;
#X msg 251 124 phase \$1;
#X msg 251 103 0;
#X msg 281 103 0.5;
#X obj 27 411 *~ 0.1;
#X text 314 104 Sets the phase.;
#X text 64 104 Sets the frequency.;
#X floatatom 42 145 5 0 0 0 - - -;
#X text 304 170 An optional argument can be used to set initial value
for the main signal inlet.;
#X text 25 23 This example shows how to create a simple Sine Wave Oscillator.
The "-s11" flag creates 1 signal inlet and 1 signal outlet. ofelia.perform()
function is called at each DSP-cycle. The function takes input audio
buffer as a table parameter and returns a table for output audio buffer.
;
#X text 79 145 It also accepts float value. (while signal is not connected)
;
#X text 304 272 ofelia.perform() takes 1 sample table parameter since
the object has 1 signal inlet.;
#X text 304 378 ofelia.perform() returns 1 sample table since the object
has 1 signal outlet.;
#X text 163 482 <- Right click and see the help file.;
#X text 103 429 This object works identically as the [pdSine~] abstraction
which uses the built-in pdOsc() class allowing users to use various
types of oscillators.;
#X obj 106 482 pdSine~;
#X obj 478 21 declare -path ofelia/libs/pd;
#X obj 27 170 ofelia d -s11 440 \; local inlet = pdInlet(this) \; local
phase = 0 \; function ofelia.float(f) \; inlet:setSignalInlet(f) \;
end \; function ofelia.phase(f) \; phase = f \; end \; function ofelia.perform(s1)
\; local freq = s1[1] \; local step = 1 / (pdGetSampleRate() / freq)
\; for i=1 \, #s1 do \; s1[i] = math.sin(phase * OF_TWO_PI) \; if (phase
>= 1) then \; phase = phase - 1 \; end \; phase = phase + step \; end
\; return s1 \; end \;;
#X connect 1 0 19 0;
#X connect 2 0 1 0;
#X connect 3 0 19 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 6 0 0 0;
#X connect 6 0 0 1;
#X connect 9 0 19 0;
#X connect 19 0 6 0;
