#N canvas 321 23 601 851 10;
#X declare -lib ofelia;
#X obj 0 0 cnv 15 580 40 empty empty ofEditMesh3dColor 3 12 0 18 -204280
-1 0;
#X obj 0 381 cnv 3 580 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 0 760 cnv 3 580 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 75 389 cnv 17 3 360 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 75 768 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 0 845 cnv 15 580 21 empty empty empty 20 12 0 14 -228856 -66577
0;
#X obj 0 796 cnv 3 580 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X text 95 409 name <s>;
#X text 72 819 1) symbol;
#N canvas 321 114 507 253 about_vector 0;
#X text 26 23 in ofelia \, a vector data structure is commonly used
for handling various data types such as float \, symbol and list. vectors
are much like arrays that can dynamically be changed in size.;
#X text 26 163 each "loader" object should have a unique variable name
so its data can be properly accessed by "getter" objects that use the
name.;
#X text 26 93 in general \, objects that use vector are divided into
two types \, "loader" objects that can store an array of data and "getter"
objects that can read the stored data from "loader" objects.;
#X restore 486 66 pd about_vector;
#X text 245 222 edit the specified array element.;
#X obj 23 247 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 41 247 outputs bang when editing is done.;
#X obj 23 297 print;
#X text 241 529 - adds the value to the array element.;
#X text 241 549 - subtracts the value from the array element.;
#X text 241 569 - multiplies the array element by the value.;
#X text 241 589 - divides the array element by the value.;
#X text 241 629 - linearly interpolates the array element.;
#X text 95 768 bang;
#X text 241 768 - outputs bang when editing is done.;
#X text 241 409 - sets the variable name followed by the index.;
#X text 241 819 - sets the variable name followed by the index.;
#X text 68 297 print all array elements as a list.;
#X text 95 389 float;
#X text 241 389 - sets the index of the array element.;
#X text 95 429 assign <s/l>;
#X text 241 429 - assigns the color value to the array element.;
#X text 95 449 assignR <f>;
#X text 95 469 assignG <f>;
#X text 95 489 assignB <f>;
#X text 95 509 assignA <f>;
#X text 241 449 - assigns the r value to the array element.;
#X text 241 469 - assigns the g value to the array element.;
#X text 241 489 - assigns the b value to the array element.;
#X text 241 509 - assigns the a value to the array element.;
#X text 95 529 add <f \, f \, f>;
#X text 95 549 sub <f \, f \, f>;
#X text 95 569 mult <f>;
#X text 95 590 div <f>;
#X text 95 629 lerp <f \, f \, f \, f \, f>;
#X text 95 649 normalize;
#X text 241 649 - normalizes the array element to a length of 255;
#X text 241 669 - sets the current hue.;
#X text 95 669 hue <f>;
#X text 95 689 hueAngle <f>;
#X text 95 709 brightness <f>;
#X text 241 709 - sets the current brightness.;
#X text 95 729 saturation <f>;
#X text 241 729 - sets the current saturation.;
#X text 95 610 invert;
#X obj 23 359 ofWindow 320 240 LEFT TOP;
#N canvas 322 115 621 260 related_drawer_objects 0;
#X obj 63 34 loadbang;
#X obj 63 55 ofGetLastRenderOrder;
#X obj 30 76 ofHead;
#X obj 30 97 ofClear 63;
#X obj 30 163 ofSetFillMode FILLED;
#X obj 147 141 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 174 191 draw the stored mesh.;
#X text 172 140 note: the mesh will be drawn as a wireframe when it's
not filled.;
#X obj 30 119 ofTranslate 160 120;
#X obj 30 190 ofDrawMesh3d @myMesh3d;
#X connect 0 0 1 0;
#X connect 1 0 2 1;
#X connect 2 0 3 0;
#X connect 3 0 8 0;
#X connect 4 0 9 0;
#X connect 5 0 4 1;
#X connect 8 0 4 0;
#X restore 23 338 pd related_drawer_objects;
#X text 241 689 - sets the hue angle between 0 and 360;
#X text 241 609 - inverts the array element.;
#X text 11 23 edit the stored mesh3d color;
#X obj 469 5 ofEditMesh3dColor;
#X obj 23 69 ofLoadMesh3d \; @myMesh3d \; vertex -50 50 0 \; vertex
0 -50 0 \; vertex 50 50 0 \; color 255 0 0 255 \; color 0 255 0 255
\; color 0 0 255 255 \;;
#N canvas 321 115 661 544 ofEditMesh3dColor_parameters 0;
#X msg 30 314 normalize;
#X msg 30 64 assign turquoise;
#X msg 30 34 assign 0 153 37 255;
#X text 160 34 assign "0 153 37 255" to the array element.;
#X text 142 64 you can assign using the color name.;
#X msg 30 94 assign 0x3293ef;
#X text 134 94 you can also use hex color code.;
#X msg 30 274 lerp 255 255 255 255 0.5;
#X text 190 275 linearly interpolate the array element towards "255
255 255 255" with the control amount of "0.5".;
#X text 99 314 normalize the array element to a length of 255;
#X msg 30 244 invert;
#X text 82 244 invert the array element. (subtract from 255);
#X text 87 344 set the current hue.;
#X text 109 374 set the hue angle between 0 and 360;
#X msg 30 374 hueAngle 90;
#X msg 30 404 brightness 128;
#X text 128 404 set the current brightness.;
#X msg 30 434 saturation 128;
#X text 128 434 set the current saturation.;
#X msg 30 344 hue 128;
#X msg 30 124 add 10;
#X msg 30 154 sub 10;
#X msg 30 214 div 2;
#X text 81 124 add "10" to the array element.;
#X text 82 154 subtract "10" from the array element.;
#X text 82 184 multiply the array element by "2".;
#X text 75 214 divide the array element by "2".;
#X msg 30 184 mult 2;
#X obj 30 491 outlet;
#X connect 0 0 28 0;
#X connect 1 0 28 0;
#X connect 2 0 28 0;
#X connect 5 0 28 0;
#X connect 7 0 28 0;
#X connect 10 0 28 0;
#X connect 14 0 28 0;
#X connect 15 0 28 0;
#X connect 17 0 28 0;
#X connect 19 0 28 0;
#X connect 20 0 28 0;
#X connect 21 0 28 0;
#X connect 22 0 28 0;
#X connect 27 0 28 0;
#X restore 23 198 pd ofEditMesh3dColor_parameters;
#X obj 23 222 ofEditMesh3dColor @myMesh3d[1];
#X obj 23 270 ofGetMesh3dColors @myMesh3d;
#X obj 462 46 declare -lib ofelia;
#X connect 11 0 60 0;
#X connect 58 0 59 0;
#X connect 59 0 11 0;
#X connect 60 0 13 0;
