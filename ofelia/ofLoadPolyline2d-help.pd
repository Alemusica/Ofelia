#N canvas 321 23 601 800 10;
#X obj 0 0 cnv 15 580 40 empty empty ofLoadPolyline2d 3 12 0 18 -204280
-1 0;
#X obj 0 361 cnv 3 580 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 0 640 cnv 3 580 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 75 369 cnv 17 3 260 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 75 648 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 0 745 cnv 15 580 21 empty empty empty 20 12 0 14 -228856 -66577
0;
#X obj 0 676 cnv 3 580 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X text 95 648 float;
#X text 95 369 name <s>;
#X text 95 389 load <l>;
#X text 95 429 append <l>;
#X text 95 449 prepend <l>;
#X text 95 509 erase <f \, f>;
#X text 95 529 clear;
#X text 72 699 1) symbol;
#X text 72 719 2) list;
#N canvas 321 133 507 253 about_vector 0;
#X text 26 23 in ofelia \, a vector data structure is commonly used
for handling various data types such as float \, symbol and list. vectors
are much like arrays that can dynamically be changed in size.;
#X text 26 163 each "loader" object should have a unique variable name
so its data can be properly accessed by "getter" objects that use the
name.;
#X text 26 93 in general \, objects that use vector are divided into
two types \, "loader" objects that can store an array of data and "getter"
objects that can read the stored data from "loader" objects.;
#X restore 486 46 pd about_vector;
#X floatatom 23 238 5 0 0 0 - - -, f 5;
#X text 241 648 - the number of elements stored in the array.;
#X text 67 238 the number of elements stored in the array.;
#N canvas 321 85 600 786 related_getter_objects 0;
#X obj 30 32 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X msg 30 248 0 0;
#X msg 65 248 0 49;
#X msg 107 248 0 50;
#X floatatom 30 295 5 0 0 0 - - -, f 5;
#X obj 30 319 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 365 print;
#X obj 30 392 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 438 print;
#X obj 30 465 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 30 78 5 0 0 0 - - -, f 5;
#X text 72 78 0: not exists \, 1: exists.;
#X text 76 294 0: not inside \, 1: inside.;
#X text 53 31 check if the polyline2d variable name exists or not.
;
#X obj 30 56 ofDoesPolyline2dNameExist @myPolyline2d;
#X obj 30 273 ofIsPointInsidePolyline2d @myPolyline2d;
#X obj 30 343 ofGetPolyline2dCommand @myPolyline2d[1];
#X obj 30 416 ofGetPolyline2dCommands @myPolyline2d;
#X obj 30 489 ofGetPolyline2dBoundingBox @myPolyline2d;
#X text 146 248 check if a 2d point is within a closed polyline2d.
;
#X text 53 318 get a polyline2d command at the index "1".;
#X text 53 391 get all polyline2d commands as a list.;
#X obj 30 102 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 148 print;
#X obj 30 175 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 221 print;
#X text 53 101 get a polyline2d point at the index "1". (starting from
"0");
#X text 53 174 get all polyline2d points as a list.;
#X obj 30 126 ofGetPolyline2dPoint @myPolyline2d[1];
#X obj 30 199 ofGetPolyline2dPoints @myPolyline2d;
#X obj 30 511 print;
#X obj 30 538 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 584 print;
#X obj 30 562 ofGetPolyline2dCentroid @myPolyline2d;
#X obj 30 611 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 657 print;
#X obj 30 635 ofGetPolyline2dArea @myPolyline2d;
#X text 53 537 get the center position of the polyline2d area.;
#X text 53 610 get the precise area of the polyline2d.;
#X obj 30 684 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 30 730 print;
#X obj 30 708 ofGetPolyline2dPerimeter @myPolyline2d;
#X text 53 683 get the size of the perimeter of the polyline2d.;
#X text 53 464 get the dimensions of the polyline2d bounding box.;
#X connect 0 0 14 0;
#X connect 1 0 15 0;
#X connect 2 0 15 0;
#X connect 3 0 15 0;
#X connect 5 0 16 0;
#X connect 7 0 17 0;
#X connect 9 0 18 0;
#X connect 14 0 10 0;
#X connect 15 0 4 0;
#X connect 16 0 6 0;
#X connect 17 0 8 0;
#X connect 18 0 30 0;
#X connect 22 0 28 0;
#X connect 24 0 29 0;
#X connect 28 0 23 0;
#X connect 29 0 25 0;
#X connect 31 0 33 0;
#X connect 33 0 32 0;
#X connect 34 0 36 0;
#X connect 36 0 35 0;
#X connect 39 0 41 0;
#X connect 41 0 40 0;
#X restore 23 308 pd related_getter_objects;
#X text 95 549 rectMode <f/s>;
#X text 95 569 circleRes <f>;
#X text 95 589 curveRes <f>;
#X text 95 609 simplify <f>;
#X text 95 469 insert <l \, f \, f>;
#X text 95 489 fill <l \, f \, f>;
#X obj 23 339 ofWindow 320 240 LEFT TOP;
#X obj 475 5 ofLoadPolyline2d;
#N canvas 321 135 1037 600 list_of_polyline2d_commands 0;
#X text 37 94 moveTo;
#X text 37 34 <command name>;
#X text 207 34 <arguments>;
#X text 577 34 <description>;
#X text 37 114 lineTo;
#X text 37 134 arc;
#X text 37 154 curveTo;
#X text 37 174 bezierTo;
#X text 37 194 quadBezierTo;
#X text 37 214 close;
#X text 37 234 circle;
#X text 578 94 move the position to x \, y.;
#X text 577 114 draw a line to x \, y from the current position.;
#X text 577 134 draw an arc at the current position.;
#X text 577 154 draw a curve to x \, y from the current position.;
#X text 577 174 draw cubic bezier line with the 2 control points.;
#X text 577 194 draw quadratic bezier line with the 2 control points.
;
#X text 577 214 close the current subpath and creates a new subpath.
;
#X text 37 254 ellipse;
#X text 577 234 draw a circle.;
#X text 577 254 draw an ellipse.;
#X text 37 274 sector;
#X text 37 294 triangle;
#X text 577 294 draw a 2d triangle.;
#X text 577 314 draw an equilateral triangle.;
#X text 577 334 draw an isosceles triangle.;
#X text 37 354 quad;
#X text 577 354 draw a 2d quadrilateral.;
#X text 37 374 square;
#X text 577 374 draw a square.;
#X text 577 394 draw a rectangle.;
#X text 37 434 rectRounded4;
#X text 37 414 rectRounded;
#X text 577 414 draw a rounded rectangle with a given corner radius.
;
#X text 37 454 cross;
#X text 577 454 draw a cross.;
#X text 37 474 heart;
#X text 577 474 draw a heart.;
#X text 37 494 moon;
#X text 577 494 draw a moon.;
#X text 37 514 regPolygon;
#X text 577 514 draw a regular polygon.;
#X text 37 534 star;
#X text 577 534 draw a star.;
#X text 37 394 rectangle (rect);
#X text 37 314 eqTriangle (eqTri);
#X text 37 334 isoTriangle (isoTri);
#X text 577 274 draw a sector.;
#X text 577 434 draw a rounded rectangle with given 4 corner radiuses.
;
#X text 207 94 x \, y.;
#X text 207 114 x \, y.;
#X text 207 134 radiusX \, radiusY \, angleBegin \, angleEnd.;
#X text 207 154 x \, y.;
#X text 207 174 cx1 \, cy1 \, cx2 \, cy2 \, x \, y.;
#X text 207 194 cx1 \, cy1 \, cx2 \, cy2 \, x \, y.;
#X text 207 214 none.;
#X text 207 234 radius.;
#X text 207 254 width \, height.;
#X text 207 274 radiusX \, radiusY \, angleBegin \, angleEnd.;
#X text 207 294 x1 \, y1 \, x2 \, y2 \, x3 \, y3.;
#X text 207 314 size.;
#X text 207 334 width \, height.;
#X text 207 354 x1 \, y1 \, x2 \, y2 \, x3 \, y3 \, x4 \, y4.;
#X text 207 374 size.;
#X text 207 394 width \, height.;
#X text 207 414 width \, height \, radius.;
#X text 207 434 width \, height \, radius1 \, radius2 \, radius3 \,
radius4.;
#X text 207 454 size \, thickness.;
#X text 207 474 width \, height.;
#X text 207 494 width \, height \, phase.;
#X text 207 514 radius \, numSides.;
#X text 207 534 radius1 \, radius2 \, numPoints.;
#X text 207 74 x \, y.;
#X text 37 54 newSubPath;
#X text 207 54 none.;
#X text 37 74 vertex;
#X text 578 54 create a new subpath.;
#X text 577 74 add a point at the end of the polyline.(identical to
lineTo);
#X restore 191 103 pd list_of_polyline2d_commands;
#X text 95 409 add <l>;
#X text 241 369 - sets the unique variable name for the array.;
#X text 241 389 - (re)initializes an array with one or more elements.
;
#X text 241 409 - adds a single element to the end of the array.;
#X text 241 429 - appends one or more elements to the array.;
#X text 241 449 - prepends one or more elements to the array.;
#X text 241 469 - inserts an element at the specified position.;
#X text 241 489 - assigns value to all the elements in the range.;
#X text 241 509 - removes a range of elements from the array.;
#X text 241 529 - removes all elements from the array.;
#X text 241 549 - sets the align mode for rectangular objects.;
#X text 241 569 - sets the resolution for circular objects.;
#X text 241 589 - sets the resolution for curved objects.;
#X text 241 609 - simplifies the path \, removing unnecessary points.
;
#X text 241 699 - sets the unique variable name for the array.;
#X text 241 719 - initializes an array with one or more elements.;
#N canvas 322 133 490 215 related_drawer_objects 0;
#X obj 30 118 ofTranslate 160 120;
#X obj 63 34 loadbang;
#X obj 63 55 ofGetLastRenderOrder;
#X obj 30 76 ofHead;
#X obj 30 97 ofClear 63;
#X obj 30 139 ofDrawPolyline2d @myPolyline2d;
#X text 221 139 draw the stored polyline2d.;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 2 0 3 1;
#X connect 3 0 4 0;
#X connect 4 0 0 0;
#X restore 23 288 pd related_drawer_objects;
#X text 11 23 store an array of polyline2d commands;
#X text 21 43 [ofLoadPolyline2d] stores an array of polyline2d commands
consisting of 2d points that can be drawn to the screen \, or used
by its related "getter" objects.;
#X obj 23 130 ofLoadPolyline2d \; @myPolyline2d \; circle 50 \; moveTo
25 0 \; lineTo -13 22 \; lineTo -13 -22 \; close \;;
#X floatatom 122 217 5 0 0 0 - - -, f 5;
#X text 166 217 the number of 2d points.;
#N canvas 322 135 713 698 related_editor_objects 0;
#X msg 30 34 assign 3 4;
#X text 107 34 assign "3 4" to the array element.;
#X msg 30 64 add 2 3;
#X text 86 64 add "2 3" to the array element.;
#X msg 30 94 sub 1 2;
#X text 87 95 subtract "1 2" from the array element.;
#X msg 30 124 mult 3 2;
#X text 95 124 multiply the array element by "3 2".;
#X msg 30 154 div 4 5;
#X text 91 154 divide the array element by "4 5".;
#X msg 30 184 lerp 5 4 0.5;
#X text 119 185 linearly interpolate the array element towards "5 4"
with the control amount of "0.5".;
#X msg 30 254 map 0 0 2 0 0 2;
#X msg 30 224 limit 3;
#X msg 30 314 middle 8 6;
#X text 107 314 set the array element to the midpoint between itself
and "8 6".;
#X msg 30 354 normalize;
#X msg 30 384 perpendicular;
#X msg 30 424 rotate 90 5 4;
#X msg 30 464 rotateRad 1.5 5 4;
#X msg 30 504 scale 10;
#X text 88 225 restrict the length(magnitude) of this vector to "3".
;
#X text 100 354 normalize the array element to a length of 1;
#X text 124 384 set the array element to its own normalized perpendicular
(by rotating 90 degrees and normalizing);
#X text 125 424 rotate the array element by "90" angle degrees around
the pivot "5 4".;
#X text 151 465 rotate the array element by "1.5" angle radians around
the pivot "5 4".;
#X text 137 254 map the array element from its default coordinate system
origin (0 \, 0) \, x direction (1 \, 0) \, y direction (0 \, 1) to
a new coordinate system defined with origin at "0 0" \, X direction
"2 0" \, and Y direction "0 2".;
#X obj 30 571 ofEditPolyline2dPoint @myPolyline2d[1];
#X text 271 571 edit the point at the index "1". (starting from "0")
;
#X obj 30 635 print;
#X obj 30 593 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 48 593 outputs bang when editing is done.;
#X obj 30 613 ofGetPolyline2dPoint @myPolyline2d[1];
#X text 93 504 scale the array element up or down so that it has the
requested length "10".;
#X connect 0 0 27 0;
#X connect 2 0 27 0;
#X connect 4 0 27 0;
#X connect 6 0 27 0;
#X connect 8 0 27 0;
#X connect 10 0 27 0;
#X connect 12 0 27 0;
#X connect 13 0 27 0;
#X connect 14 0 27 0;
#X connect 16 0 27 0;
#X connect 17 0 27 0;
#X connect 18 0 27 0;
#X connect 19 0 27 0;
#X connect 20 0 27 0;
#X connect 27 0 30 0;
#X connect 30 0 32 0;
#X connect 32 0 29 0;
#X restore 23 268 pd related_editor_objects;
#N canvas 322 134 894 637 polyline2d_example 0;
#X msg 36 33 print;
#X obj 36 568 outlet;
#X msg 36 70 load moveTo 0 0 lineTo 100 0 lineTo 100 100 lineTo 0 100
close;
#X text 85 33 print the current settings and stored array elements.
;
#X msg 36 167 add circle 50;
#X text 131 167 add an element "circle 50" to the end of the array.
;
#X msg 36 204 erase 2 2;
#X obj 36 362 ofPack circleRes 50;
#X floatatom 147 342 5 0 0 0 - - -, f 5;
#X text 187 341 change the circle resolution.;
#X floatatom 135 452 5 0 0 0 - - -, f 5;
#X obj 36 472 ofPack simplify 0;
#X text 176 451 simplify the path \, removing unnecessary points.;
#X msg 36 509 clear;
#X text 83 509 remove all elements from the array.;
#X msg 36 241 fill heart 100 100 5 5;
#X floatatom 141 397 5 0 0 0 - - -, f 5;
#X obj 36 417 ofPack curveRes 50;
#X text 181 396 change the curve resolution.;
#X obj 36 297 ofPack rectMode 0;
#X obj 135 277 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 392 70 (re)initialize an array with "moveTo 0 0" \, "lineTo
100 0" \, "lineTo 100 100" \, "lineTo 0 100" \, "close".;
#X text 105 204 remove the index range "2~2".;
#X text 186 241 assign "heart 100 100" to the index range "5~5".;
#X text 155 277 0: CORNER \, 1: CENTER.;
#X text 152 298 note: rectMode only applies to prebuilt rectangular
shapes such as square \, rectangle \, rectRounded.;
#X msg 36 120 load moveTo 0 0 lineTo 100 0 100 100 0 100 close;
#X text 342 120 this is identical to the one above as you can skip
writing the repeating command names.;
#X connect 0 0 1 0;
#X connect 2 0 1 0;
#X connect 4 0 1 0;
#X connect 6 0 1 0;
#X connect 7 0 1 0;
#X connect 8 0 7 1;
#X connect 10 0 11 1;
#X connect 11 0 1 0;
#X connect 13 0 1 0;
#X connect 15 0 1 0;
#X connect 16 0 17 1;
#X connect 17 0 1 0;
#X connect 19 0 1 0;
#X connect 20 0 19 1;
#X connect 26 0 1 0;
#X restore 23 103 pd polyline2d_example;
#X connect 49 0 17 0;
#X connect 49 1 50 0;
#X connect 53 0 49 0;
