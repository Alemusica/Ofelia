#pragma once

#include "m_pd.h"
#include <string>

class ofxOfeliaDefine;
class ofxOfeliaEmbFunction
{
public:
    ofxOfeliaEmbFunction(ofxOfeliaDefine *definePtr)
    :definePtr(definePtr){};
    void *newMethod_default(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofSetup(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofUpdate(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofDraw(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofExit(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofKeyPressed(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofKeyReleased(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofMouseMoved(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofMouseDragged(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofMousePressed(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofMouseReleased(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofMouseScrolled(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofMouseEntered(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofMouseExited(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofWindowResized(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofMessageReceived(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofDragged(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofTouchCancelled(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofTouchDoubleTap(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofTouchDown(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofTouchMoved(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofTouchUp(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofLostFocus(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofGotFocus(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofGotMemoryWarning(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofDeviceOrientationChanged(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofLaunchedWithURL(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofSwipe(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofPause(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofStop(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofResume(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofReloadTextures(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofBackPressed(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofOkPressed(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofCancelPressed(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofGetFirstDrawOrder();
    void *newMethod_ofGetLastDrawOrder();
    void *newMethod_ofTrueTypeFontSettings(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofRequire(t_symbol *s);
    void *newMethod_ofExpr(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofExpr_tilde(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofIf(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofIf_tilde(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofFor(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofTable(t_symbol *s, int argc, t_atom *argv);
    void *newMethod_ofGetDollarZero(t_floatarg f);
    void *newMethod_ofCanvasName(t_floatarg f);
    void *newMethod_ofCanvasIndex(t_floatarg f);
    void *newMethod_ofCanvasArgs(t_floatarg f);
    void *newMethod_ofCanvasPosition(t_floatarg f);
    void *newMethod_ofGetDir(t_floatarg f);
    void *newMethod_ofMakeFileName(t_floatarg f);
    void *newMethod_ofRemoveCanvas(t_floatarg f);
    void *newMethod_ofSine_tilde(t_floatarg f);
    void *newMethod_ofTriangle_tilde(t_floatarg f);
    void *newMethod_ofSaw_tilde(t_floatarg f);
    void *newMethod_ofSquare_tilde(t_floatarg f);
    void *newMethod_ofPulse_tilde(t_floatarg f);
    void *newMethod_ofBlTriangle_tilde(t_floatarg f);
    void *newMethod_ofBlSaw_tilde(t_floatarg f);
    void *newMethod_ofBlSquare_tilde(t_floatarg f);
    void *newMethod_ofBlPulse_tilde(t_floatarg f);
    void *newMethod_ofLowPass_tilde();
    void *newMethod_ofHighPass_tilde();
    void *newMethod_ofBandPass_tilde();
    void *newMethod_ofNotch_tilde();
    void *newMethod_ofPeaking_tilde();
    void *newMethod_ofLowShelf_tilde();
    void *newMethod_ofHighShelf_tilde();
    void *newMethod_ofAllPass_tilde();
    void *newMethod_ofReverb_tilde();
    void *newMethod_ofOscSender();
    void *newMethod_ofOscReceiver();
    static void *newWrapper_default(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofSetup(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofUpdate(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofDraw(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofExit(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofKeyPressed(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofKeyReleased(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofMouseMoved(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofMouseDragged(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofMousePressed(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofMouseReleased(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofMouseScrolled(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofMouseEntered(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofMouseExited(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofWindowResized(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofMessageReceived(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofDragged(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofTouchCancelled(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofTouchDoubleTap(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofTouchDown(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofTouchMoved(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofTouchUp(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofLostFocus(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofGotFocus(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofGotMemoryWarning(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofDeviceOrientationChanged(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofLaunchedWithURL(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofSwipe(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofPause(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofStop(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofResume(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofReloadTextures(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofBackPressed(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofOkPressed(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofCancelPressed(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofGetFirstDrawOrder();
    static void *newWrapper_ofGetLastDrawOrder();
    static void *newWrapper_ofTrueTypeFontSettings(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofRequire(t_symbol *s);
    static void *newWrapper_ofExpr(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofExpr_tilde(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofIf(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofIf_tilde(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofFor(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofTable(t_symbol *s, int argc, t_atom *argv);
    static void *newWrapper_ofGetDollarZero(t_floatarg f);
    static void *newWrapper_ofCanvasName(t_floatarg f);
    static void *newWrapper_ofCanvasIndex(t_floatarg f);
    static void *newWrapper_ofCanvasArgs(t_floatarg f);
    static void *newWrapper_ofCanvasPosition(t_floatarg f);
    static void *newWrapper_ofGetDir(t_floatarg f);
    static void *newWrapper_ofMakeFileName(t_floatarg f);
    static void *newWrapper_ofRemoveCanvas(t_floatarg f);
    static void *newWrapper_ofSine_tilde(t_floatarg f);
    static void *newWrapper_ofTriangle_tilde(t_floatarg f);
    static void *newWrapper_ofSaw_tilde(t_floatarg f);
    static void *newWrapper_ofSquare_tilde(t_floatarg f);
    static void *newWrapper_ofPulse_tilde(t_floatarg f);
    static void *newWrapper_ofBlTriangle_tilde(t_floatarg f);
    static void *newWrapper_ofBlSaw_tilde(t_floatarg f);
    static void *newWrapper_ofBlSquare_tilde(t_floatarg f);
    static void *newWrapper_ofBlPulse_tilde(t_floatarg f);
    static void *newWrapper_ofLowPass_tilde();
    static void *newWrapper_ofHighPass_tilde();
    static void *newWrapper_ofBandPass_tilde();
    static void *newWrapper_ofNotch_tilde();
    static void *newWrapper_ofPeaking_tilde();
    static void *newWrapper_ofLowShelf_tilde();
    static void *newWrapper_ofHighShelf_tilde();
    static void *newWrapper_ofAllPass_tilde();
    static void *newWrapper_ofReverb_tilde();
    static void *newWrapper_ofOscSender();
    static void *newWrapper_ofOscReceiver();
    static void setup();
private:
    void ofExpr_tilde_getNumInlets(const std::string &exprStr, size_t &numInlets);
    bool ofFor_isOperator(char ch);
    ofxOfeliaDefine *definePtr; /* pointer to define */
};
